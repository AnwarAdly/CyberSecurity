
Diagnostic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000028a2  00002916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f5c  00000000  00000000  0000293c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000eba  00000000  00000000  00004898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005752  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005892  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000764b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008536  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000092e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000096d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009e9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 4f 14 	jmp	0x289e	; 0x289e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e7       	ldi	r26, 0x7B	; 123
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e7       	ldi	r24, 0x7B	; 123
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 37 14 	jmp	0x286e	; 0x286e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
void receive_response(uint8_t *response, uint8_t length);
void encrypt_bytes(uint8_t *input, uint8_t *output);
void display_on_lcd(uint8_t *message);

int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	e5 97       	sbiw	r28, 0x35	; 53
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	uart_init(MYUBRR);
     b4a:	83 e3       	ldi	r24, 0x33	; 51
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 80 06 	call	0xd00	; 0xd00 <uart_init>
	H_Lcd_Void_LCDInit();
     b52:	0e 94 93 0b 	call	0x1726	; 0x1726 <H_Lcd_Void_LCDInit>
	H_LED_Void_LedInit(LED_RED);
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	0e 94 a8 10 	call	0x2150	; 0x2150 <H_LED_Void_LedInit>

	// Example 1 and Example 3 Test Steps
	uint8_t service_command[] = {0x31, 0x01, 0xAA, 0x00};
     b5c:	81 e3       	ldi	r24, 0x31	; 49
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	8a ea       	ldi	r24, 0xAA	; 170
     b66:	8b 83       	std	Y+3, r24	; 0x03
     b68:	1c 82       	std	Y+4, r1	; 0x04
	send_command(service_command, 4);
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	0e 94 c5 06 	call	0xd8a	; 0xd8a <send_command>

	uint8_t response[1];
	receive_response(response, 1);
     b74:	ce 01       	movw	r24, r28
     b76:	05 96       	adiw	r24, 0x05	; 5
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <receive_response>

	if (response[0] == 0x33)
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	83 33       	cpi	r24, 0x33	; 51
     b82:	09 f0       	breq	.+2      	; 0xb86 <main+0x50>
     b84:	5e c0       	rjmp	.+188    	; 0xc42 <main+0x10c>
	{
		// Request security access
		uint8_t security_request[] = {0x27, 0x01};
     b86:	87 e2       	ldi	r24, 0x27	; 39
     b88:	8e 87       	std	Y+14, r24	; 0x0e
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	8f 87       	std	Y+15, r24	; 0x0f
		send_command(security_request, 2);
     b8e:	ce 01       	movw	r24, r28
     b90:	0e 96       	adiw	r24, 0x0e	; 14
     b92:	62 e0       	ldi	r22, 0x02	; 2
     b94:	0e 94 c5 06 	call	0xd8a	; 0xd8a <send_command>

		uint8_t security_response[6];
		receive_response(security_response, 6);
     b98:	ce 01       	movw	r24, r28
     b9a:	40 96       	adiw	r24, 0x10	; 16
     b9c:	66 e0       	ldi	r22, 0x06	; 6
     b9e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <receive_response>

		if (security_response[0] == 0x67 && security_response[1] == 0x01)
     ba2:	88 89       	ldd	r24, Y+16	; 0x10
     ba4:	87 36       	cpi	r24, 0x67	; 103
     ba6:	09 f0       	breq	.+2      	; 0xbaa <main+0x74>
     ba8:	4c c0       	rjmp	.+152    	; 0xc42 <main+0x10c>
     baa:	89 89       	ldd	r24, Y+17	; 0x11
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	09 f0       	breq	.+2      	; 0xbb2 <main+0x7c>
     bb0:	48 c0       	rjmp	.+144    	; 0xc42 <main+0x10c>
		{
			// Encrypt random bytes
			uint8_t random_bytes[4] = {security_response[2], security_response[3], security_response[4], security_response[5]};
     bb2:	8a 89       	ldd	r24, Y+18	; 0x12
     bb4:	9b 89       	ldd	r25, Y+19	; 0x13
     bb6:	2c 89       	ldd	r18, Y+20	; 0x14
     bb8:	3d 89       	ldd	r19, Y+21	; 0x15
     bba:	8e 8b       	std	Y+22, r24	; 0x16
     bbc:	9f 8b       	std	Y+23, r25	; 0x17
     bbe:	28 8f       	std	Y+24, r18	; 0x18
     bc0:	39 8f       	std	Y+25, r19	; 0x19
			uint8_t encrypted_bytes[4];
			encrypt_bytes(random_bytes, encrypted_bytes);
     bc2:	ce 01       	movw	r24, r28
     bc4:	46 96       	adiw	r24, 0x16	; 22
     bc6:	9e 01       	movw	r18, r28
     bc8:	26 5e       	subi	r18, 0xE6	; 230
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	b9 01       	movw	r22, r18
     bce:	0e 94 12 07 	call	0xe24	; 0xe24 <encrypt_bytes>

			// Send encrypted bytes
			uint8_t security_send[] = {0x27, 0x02, encrypted_bytes[0], encrypted_bytes[1], encrypted_bytes[2], encrypted_bytes[3]};
     bd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bd4:	2b 8d       	ldd	r18, Y+27	; 0x1b
     bd6:	3c 8d       	ldd	r19, Y+28	; 0x1c
     bd8:	4d 8d       	ldd	r20, Y+29	; 0x1d
     bda:	87 e2       	ldi	r24, 0x27	; 39
     bdc:	8e 8f       	std	Y+30, r24	; 0x1e
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	8f 8f       	std	Y+31, r24	; 0x1f
     be2:	98 a3       	std	Y+32, r25	; 0x20
     be4:	29 a3       	std	Y+33, r18	; 0x21
     be6:	3a a3       	std	Y+34, r19	; 0x22
     be8:	4b a3       	std	Y+35, r20	; 0x23
			send_command(security_send, 6);
     bea:	ce 01       	movw	r24, r28
     bec:	4e 96       	adiw	r24, 0x1e	; 30
     bee:	66 e0       	ldi	r22, 0x06	; 6
     bf0:	0e 94 c5 06 	call	0xd8a	; 0xd8a <send_command>

			uint8_t security_confirm[2];
			receive_response(security_confirm, 2);
     bf4:	ce 01       	movw	r24, r28
     bf6:	84 96       	adiw	r24, 0x24	; 36
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <receive_response>

			if (security_confirm[0] == 0x67 && security_confirm[1] == 0x02)
     bfe:	8c a1       	ldd	r24, Y+36	; 0x24
     c00:	87 36       	cpi	r24, 0x67	; 103
     c02:	c1 f4       	brne	.+48     	; 0xc34 <main+0xfe>
     c04:	8d a1       	ldd	r24, Y+37	; 0x25
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	a9 f4       	brne	.+42     	; 0xc34 <main+0xfe>
			{
				// Security access granted, turn on LED
				send_command(service_command, 4);
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	64 e0       	ldi	r22, 0x04	; 4
     c10:	0e 94 c5 06 	call	0xd8a	; 0xd8a <send_command>

				receive_response(response, 1);
     c14:	ce 01       	movw	r24, r28
     c16:	05 96       	adiw	r24, 0x05	; 5
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <receive_response>
				if (response[0] == 0x71)
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	81 37       	cpi	r24, 0x71	; 113
     c22:	79 f4       	brne	.+30     	; 0xc42 <main+0x10c>
				{
					// LED is on
					display_on_lcd("Success 67 02");
     c24:	80 e6       	ldi	r24, 0x60	; 96
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 2c 07 	call	0xe58	; 0xe58 <display_on_lcd>
					H_LED_Void_LedOn(LED_RED);
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <H_LED_Void_LedOn>
     c32:	07 c0       	rjmp	.+14     	; 0xc42 <main+0x10c>
				}
			}
			else
			{
				// Security access denied
				H_LED_Void_LedOff(LED_RED);
     c34:	84 e0       	ldi	r24, 0x04	; 4
     c36:	0e 94 28 11 	call	0x2250	; 0x2250 <H_LED_Void_LedOff>
				display_on_lcd("NRC 7F 27 35");
     c3a:	8e e6       	ldi	r24, 0x6E	; 110
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 2c 07 	call	0xe58	; 0xe58 <display_on_lcd>
			}
		}
	}

	// Example 2 and Example 4 Test Steps
	uint8_t security_request_2[] = {0x27, 0x01};
     c42:	87 e2       	ldi	r24, 0x27	; 39
     c44:	8e 83       	std	Y+6, r24	; 0x06
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	8f 83       	std	Y+7, r24	; 0x07
	send_command(security_request_2, 2);
     c4a:	ce 01       	movw	r24, r28
     c4c:	06 96       	adiw	r24, 0x06	; 6
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	0e 94 c5 06 	call	0xd8a	; 0xd8a <send_command>

	uint8_t security_response_2[6];
	receive_response(security_response_2, 6);
     c54:	ce 01       	movw	r24, r28
     c56:	08 96       	adiw	r24, 0x08	; 8
     c58:	66 e0       	ldi	r22, 0x06	; 6
     c5a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <receive_response>

	if (security_response_2[0] == 0x67 && security_response_2[1] == 0x01)
     c5e:	88 85       	ldd	r24, Y+8	; 0x08
     c60:	87 36       	cpi	r24, 0x67	; 103
     c62:	09 f0       	breq	.+2      	; 0xc66 <main+0x130>
     c64:	4c c0       	rjmp	.+152    	; 0xcfe <main+0x1c8>
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	09 f0       	breq	.+2      	; 0xc6e <main+0x138>
     c6c:	48 c0       	rjmp	.+144    	; 0xcfe <main+0x1c8>
	{
		// Encrypt random bytes
		uint8_t random_bytes_2[4] = {security_response_2[2], security_response_2[3], security_response_2[4], security_response_2[5]};
     c6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c70:	9b 85       	ldd	r25, Y+11	; 0x0b
     c72:	2c 85       	ldd	r18, Y+12	; 0x0c
     c74:	3d 85       	ldd	r19, Y+13	; 0x0d
     c76:	8e a3       	std	Y+38, r24	; 0x26
     c78:	9f a3       	std	Y+39, r25	; 0x27
     c7a:	28 a7       	std	Y+40, r18	; 0x28
     c7c:	39 a7       	std	Y+41, r19	; 0x29
		uint8_t encrypted_bytes_2[4];
		encrypt_bytes(random_bytes_2, encrypted_bytes_2);
     c7e:	ce 01       	movw	r24, r28
     c80:	86 96       	adiw	r24, 0x26	; 38
     c82:	9e 01       	movw	r18, r28
     c84:	26 5d       	subi	r18, 0xD6	; 214
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	b9 01       	movw	r22, r18
     c8a:	0e 94 12 07 	call	0xe24	; 0xe24 <encrypt_bytes>

		// Send encrypted bytes
		uint8_t security_send_2[] = {0x27, 0x02, encrypted_bytes_2[0], encrypted_bytes_2[1], encrypted_bytes_2[2], encrypted_bytes_2[3]};
     c8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     c90:	2b a5       	ldd	r18, Y+43	; 0x2b
     c92:	3c a5       	ldd	r19, Y+44	; 0x2c
     c94:	4d a5       	ldd	r20, Y+45	; 0x2d
     c96:	87 e2       	ldi	r24, 0x27	; 39
     c98:	8e a7       	std	Y+46, r24	; 0x2e
     c9a:	82 e0       	ldi	r24, 0x02	; 2
     c9c:	8f a7       	std	Y+47, r24	; 0x2f
     c9e:	98 ab       	std	Y+48, r25	; 0x30
     ca0:	29 ab       	std	Y+49, r18	; 0x31
     ca2:	3a ab       	std	Y+50, r19	; 0x32
     ca4:	4b ab       	std	Y+51, r20	; 0x33
		send_command(security_send_2, 6);
     ca6:	ce 01       	movw	r24, r28
     ca8:	8e 96       	adiw	r24, 0x2e	; 46
     caa:	66 e0       	ldi	r22, 0x06	; 6
     cac:	0e 94 c5 06 	call	0xd8a	; 0xd8a <send_command>

		uint8_t security_confirm_2[2];
		receive_response(security_confirm_2, 2);
     cb0:	ce 01       	movw	r24, r28
     cb2:	c4 96       	adiw	r24, 0x34	; 52
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <receive_response>

		if (security_confirm_2[0] == 0x67 && security_confirm_2[1] == 0x02)
     cba:	8c a9       	ldd	r24, Y+52	; 0x34
     cbc:	87 36       	cpi	r24, 0x67	; 103
     cbe:	c1 f4       	brne	.+48     	; 0xcf0 <main+0x1ba>
     cc0:	8d a9       	ldd	r24, Y+53	; 0x35
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	a9 f4       	brne	.+42     	; 0xcf0 <main+0x1ba>
		{
			// Security access granted, turn on LED
			send_command(service_command, 4);
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	64 e0       	ldi	r22, 0x04	; 4
     ccc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <send_command>
			receive_response(response, 1);
     cd0:	ce 01       	movw	r24, r28
     cd2:	05 96       	adiw	r24, 0x05	; 5
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <receive_response>

			if (response[0] == 0x71 )
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	81 37       	cpi	r24, 0x71	; 113
     cde:	39 f4       	brne	.+14     	; 0xcee <main+0x1b8>
			{
				// LED is on
				display_on_lcd("Success 67 02");
     ce0:	80 e6       	ldi	r24, 0x60	; 96
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 2c 07 	call	0xe58	; 0xe58 <display_on_lcd>
				H_LED_Void_LedOn(LED_RED);
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <H_LED_Void_LedOn>
     cee:	07 c0       	rjmp	.+14     	; 0xcfe <main+0x1c8>
			}
		}
		else
		{
			// Security access denied
			display_on_lcd("NRC 7F 27 35");
     cf0:	8e e6       	ldi	r24, 0x6E	; 110
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 2c 07 	call	0xe58	; 0xe58 <display_on_lcd>
			H_LED_Void_LedOff(LED_RED);
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	0e 94 28 11 	call	0x2250	; 0x2250 <H_LED_Void_LedOff>
     cfe:	ff cf       	rjmp	.-2      	; 0xcfe <main+0x1c8>

00000d00 <uart_init>:

	}
}

void uart_init(unsigned int ubrr)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	00 d0       	rcall	.+0      	; 0xd06 <uart_init+0x6>
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	89 83       	std	Y+1, r24	; 0x01
	// Set baud rate
	UBRRH = (unsigned char)(ubrr >> 8);
     d0e:	e0 e4       	ldi	r30, 0x40	; 64
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	89 2f       	mov	r24, r25
     d18:	99 27       	eor	r25, r25
     d1a:	80 83       	st	Z, r24
	UBRRL = (unsigned char)ubrr;
     d1c:	e9 e2       	ldi	r30, 0x29	; 41
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	80 83       	st	Z, r24
	// Enable receiver and transmitter
	UCSRB = (1 << RXEN) | (1 << TXEN);
     d24:	ea e2       	ldi	r30, 0x2A	; 42
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	88 e1       	ldi	r24, 0x18	; 24
     d2a:	80 83       	st	Z, r24
	// Set frame format: 8 data bits, 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
     d2c:	e0 e4       	ldi	r30, 0x40	; 64
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	86 e8       	ldi	r24, 0x86	; 134
     d32:	80 83       	st	Z, r24
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <uart_transmit>:

void uart_transmit(unsigned char data)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE))); // Wait for empty transmit buffer
     d4a:	eb e2       	ldi	r30, 0x2B	; 43
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	80 72       	andi	r24, 0x20	; 32
     d56:	90 70       	andi	r25, 0x00	; 0
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	b9 f3       	breq	.-18     	; 0xd4a <uart_transmit+0xc>
	UDR = data; // Put data into buffer, sends the data
     d5c:	ec e2       	ldi	r30, 0x2C	; 44
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	80 83       	st	Z, r24
}
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <uart_receive>:

unsigned char uart_receive(void)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1 << RXC))); // Wait for data to be received
     d74:	eb e2       	ldi	r30, 0x2B	; 43
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	88 23       	and	r24, r24
     d7c:	dc f7       	brge	.-10     	; 0xd74 <uart_receive+0x8>
	return UDR; // Get and return received data from buffer
     d7e:	ec e2       	ldi	r30, 0x2C	; 44
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
}
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <send_command>:

void send_command(uint8_t *command, uint8_t length)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <send_command+0x6>
     d90:	00 d0       	rcall	.+0      	; 0xd92 <send_command+0x8>
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	9b 83       	std	Y+3, r25	; 0x03
     d98:	8a 83       	std	Y+2, r24	; 0x02
     d9a:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8_t i = 0; i < length; i++)
     d9c:	19 82       	std	Y+1, r1	; 0x01
     d9e:	0e c0       	rjmp	.+28     	; 0xdbc <send_command+0x32>
	{
		uart_transmit(command[i]);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	fc 01       	movw	r30, r24
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	80 81       	ld	r24, Z
     db2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <uart_transmit>
	return UDR; // Get and return received data from buffer
}

void send_command(uint8_t *command, uint8_t length)
{
	for (uint8_t i = 0; i < length; i++)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	99 81       	ldd	r25, Y+1	; 0x01
     dbe:	8c 81       	ldd	r24, Y+4	; 0x04
     dc0:	98 17       	cp	r25, r24
     dc2:	70 f3       	brcs	.-36     	; 0xda0 <send_command+0x16>
	{
		uart_transmit(command[i]);
	}
}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <receive_response>:

void receive_response(uint8_t *response, uint8_t length)
{
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <receive_response+0xa>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <receive_response+0xc>
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	9b 83       	std	Y+3, r25	; 0x03
     de4:	8a 83       	std	Y+2, r24	; 0x02
     de6:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8_t i = 0; i < length; i++)
     de8:	19 82       	std	Y+1, r1	; 0x01
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <receive_response+0x38>
	{
		response[i] = uart_receive();
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	8c 01       	movw	r16, r24
     df8:	02 0f       	add	r16, r18
     dfa:	13 1f       	adc	r17, r19
     dfc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <uart_receive>
     e00:	f8 01       	movw	r30, r16
     e02:	80 83       	st	Z, r24
	}
}

void receive_response(uint8_t *response, uint8_t length)
{
	for (uint8_t i = 0; i < length; i++)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	99 81       	ldd	r25, Y+1	; 0x01
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	98 17       	cp	r25, r24
     e10:	68 f3       	brcs	.-38     	; 0xdec <receive_response+0x1a>
	{
		response[i] = uart_receive();
	}
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <encrypt_bytes>:

void encrypt_bytes(uint8_t *input, uint8_t *output)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <encrypt_bytes+0x6>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <encrypt_bytes+0x8>
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	7c 83       	std	Y+4, r23	; 0x04
     e36:	6b 83       	std	Y+3, r22	; 0x03
	// Placeholder for encryption logic
	// Use a symmetric key encryption algorithm (e.g., AES) to encrypt input bytes
	// For demonstration, let's just copy input to output
	memcpy(output, input, 4);
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	29 81       	ldd	r18, Y+1	; 0x01
     e3e:	3a 81       	ldd	r19, Y+2	; 0x02
     e40:	b9 01       	movw	r22, r18
     e42:	44 e0       	ldi	r20, 0x04	; 4
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 46 14 	call	0x288c	; 0x288c <memcpy>
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <display_on_lcd>:

void display_on_lcd(uint8_t *message)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <display_on_lcd+0x6>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
	H_Lcd_Void_LCDClear();
     e66:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString(message);
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <H_Lcd_Void_LCDWriteString>
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	2a 97       	sbiw	r28, 0x0a	; 10
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	8b 83       	std	Y+3, r24	; 0x03
     e92:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9a e0       	ldi	r25, 0x0A	; 10
     e98:	69 2f       	mov	r22, r25
     e9a:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
     e9e:	89 2f       	mov	r24, r25
     ea0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9a e0       	ldi	r25, 0x0A	; 10
     ea6:	69 2f       	mov	r22, r25
     ea8:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
     eac:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3a 87       	std	Y+10, r19	; 0x0a
     eb6:	29 87       	std	Y+9, r18	; 0x09
     eb8:	89 85       	ldd	r24, Y+9	; 0x09
     eba:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	39 f0       	breq	.+14     	; 0xece <M_DIO_Void_SetPinDirection+0x52>
     ec0:	29 85       	ldd	r18, Y+9	; 0x09
     ec2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ec4:	21 30       	cpi	r18, 0x01	; 1
     ec6:	31 05       	cpc	r19, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <M_DIO_Void_SetPinDirection+0x50>
     eca:	76 c0       	rjmp	.+236    	; 0xfb8 <M_DIO_Void_SetPinDirection+0x13c>
     ecc:	e4 c0       	rjmp	.+456    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	38 87       	std	Y+8, r19	; 0x08
     ed6:	2f 83       	std	Y+7, r18	; 0x07
     ed8:	8f 81       	ldd	r24, Y+7	; 0x07
     eda:	98 85       	ldd	r25, Y+8	; 0x08
     edc:	82 30       	cpi	r24, 0x02	; 2
     ede:	91 05       	cpc	r25, r1
     ee0:	61 f1       	breq	.+88     	; 0xf3a <M_DIO_Void_SetPinDirection+0xbe>
     ee2:	2f 81       	ldd	r18, Y+7	; 0x07
     ee4:	38 85       	ldd	r19, Y+8	; 0x08
     ee6:	23 30       	cpi	r18, 0x03	; 3
     ee8:	31 05       	cpc	r19, r1
     eea:	34 f4       	brge	.+12     	; 0xef8 <M_DIO_Void_SetPinDirection+0x7c>
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	98 85       	ldd	r25, Y+8	; 0x08
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	91 05       	cpc	r25, r1
     ef4:	69 f0       	breq	.+26     	; 0xf10 <M_DIO_Void_SetPinDirection+0x94>
     ef6:	cf c0       	rjmp	.+414    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
     ef8:	2f 81       	ldd	r18, Y+7	; 0x07
     efa:	38 85       	ldd	r19, Y+8	; 0x08
     efc:	23 30       	cpi	r18, 0x03	; 3
     efe:	31 05       	cpc	r19, r1
     f00:	89 f1       	breq	.+98     	; 0xf64 <M_DIO_Void_SetPinDirection+0xe8>
     f02:	8f 81       	ldd	r24, Y+7	; 0x07
     f04:	98 85       	ldd	r25, Y+8	; 0x08
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <M_DIO_Void_SetPinDirection+0x92>
     f0c:	40 c0       	rjmp	.+128    	; 0xf8e <M_DIO_Void_SetPinDirection+0x112>
     f0e:	c3 c0       	rjmp	.+390    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     f10:	aa e3       	ldi	r26, 0x3A	; 58
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea e3       	ldi	r30, 0x3A	; 58
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <M_DIO_Void_SetPinDirection+0xb2>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <M_DIO_Void_SetPinDirection+0xae>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	ae c0       	rjmp	.+348    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     f3a:	a7 e3       	ldi	r26, 0x37	; 55
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e7 e3       	ldi	r30, 0x37	; 55
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <M_DIO_Void_SetPinDirection+0xdc>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <M_DIO_Void_SetPinDirection+0xd8>
     f5c:	80 95       	com	r24
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	99 c0       	rjmp	.+306    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
     f64:	a4 e3       	ldi	r26, 0x34	; 52
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e4 e3       	ldi	r30, 0x34	; 52
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <M_DIO_Void_SetPinDirection+0x106>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <M_DIO_Void_SetPinDirection+0x102>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	84 c0       	rjmp	.+264    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
     f8e:	a1 e3       	ldi	r26, 0x31	; 49
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e1 e3       	ldi	r30, 0x31	; 49
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <M_DIO_Void_SetPinDirection+0x130>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <M_DIO_Void_SetPinDirection+0x12c>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	6f c0       	rjmp	.+222    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
	case OUTPUT:
		switch(Local_U8_Group)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	3e 83       	std	Y+6, r19	; 0x06
     fc0:	2d 83       	std	Y+5, r18	; 0x05
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	91 05       	cpc	r25, r1
     fca:	51 f1       	breq	.+84     	; 0x1020 <M_DIO_Void_SetPinDirection+0x1a4>
     fcc:	2d 81       	ldd	r18, Y+5	; 0x05
     fce:	3e 81       	ldd	r19, Y+6	; 0x06
     fd0:	23 30       	cpi	r18, 0x03	; 3
     fd2:	31 05       	cpc	r19, r1
     fd4:	34 f4       	brge	.+12     	; 0xfe2 <M_DIO_Void_SetPinDirection+0x166>
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	61 f0       	breq	.+24     	; 0xff8 <M_DIO_Void_SetPinDirection+0x17c>
     fe0:	5a c0       	rjmp	.+180    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
     fe2:	2d 81       	ldd	r18, Y+5	; 0x05
     fe4:	3e 81       	ldd	r19, Y+6	; 0x06
     fe6:	23 30       	cpi	r18, 0x03	; 3
     fe8:	31 05       	cpc	r19, r1
     fea:	71 f1       	breq	.+92     	; 0x1048 <M_DIO_Void_SetPinDirection+0x1cc>
     fec:	8d 81       	ldd	r24, Y+5	; 0x05
     fee:	9e 81       	ldd	r25, Y+6	; 0x06
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	91 05       	cpc	r25, r1
     ff4:	e9 f1       	breq	.+122    	; 0x1070 <M_DIO_Void_SetPinDirection+0x1f4>
     ff6:	4f c0       	rjmp	.+158    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
     ff8:	aa e3       	ldi	r26, 0x3A	; 58
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ea e3       	ldi	r30, 0x3A	; 58
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <M_DIO_Void_SetPinDirection+0x19a>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <M_DIO_Void_SetPinDirection+0x196>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	3b c0       	rjmp	.+118    	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    1020:	a7 e3       	ldi	r26, 0x37	; 55
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e7 e3       	ldi	r30, 0x37	; 55
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <M_DIO_Void_SetPinDirection+0x1c2>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <M_DIO_Void_SetPinDirection+0x1be>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	27 c0       	rjmp	.+78     	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1048:	a4 e3       	ldi	r26, 0x34	; 52
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e4 e3       	ldi	r30, 0x34	; 52
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <M_DIO_Void_SetPinDirection+0x1ea>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <M_DIO_Void_SetPinDirection+0x1e6>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	13 c0       	rjmp	.+38     	; 0x1096 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    1070:	a1 e3       	ldi	r26, 0x31	; 49
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e1 e3       	ldi	r30, 0x31	; 49
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <M_DIO_Void_SetPinDirection+0x212>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <M_DIO_Void_SetPinDirection+0x20e>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
		default:                                break;
		}
		break;
	default:    break;
	}
}
    1096:	2a 96       	adiw	r28, 0x0a	; 10
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	2a 97       	sbiw	r28, 0x0a	; 10
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	8b 83       	std	Y+3, r24	; 0x03
    10be:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9a e0       	ldi	r25, 0x0A	; 10
    10c4:	69 2f       	mov	r22, r25
    10c6:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    10ca:	89 2f       	mov	r24, r25
    10cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9a e0       	ldi	r25, 0x0A	; 10
    10d2:	69 2f       	mov	r22, r25
    10d4:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    10d8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3a 87       	std	Y+10, r19	; 0x0a
    10e2:	29 87       	std	Y+9, r18	; 0x09
    10e4:	89 85       	ldd	r24, Y+9	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	39 f0       	breq	.+14     	; 0x10fa <M_DIO_Void_SetPinValue+0x52>
    10ec:	29 85       	ldd	r18, Y+9	; 0x09
    10ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    10f0:	21 30       	cpi	r18, 0x01	; 1
    10f2:	31 05       	cpc	r19, r1
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <M_DIO_Void_SetPinValue+0x50>
    10f6:	76 c0       	rjmp	.+236    	; 0x11e4 <M_DIO_Void_SetPinValue+0x13c>
    10f8:	e4 c0       	rjmp	.+456    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	38 87       	std	Y+8, r19	; 0x08
    1102:	2f 83       	std	Y+7, r18	; 0x07
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	98 85       	ldd	r25, Y+8	; 0x08
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	91 05       	cpc	r25, r1
    110c:	61 f1       	breq	.+88     	; 0x1166 <M_DIO_Void_SetPinValue+0xbe>
    110e:	2f 81       	ldd	r18, Y+7	; 0x07
    1110:	38 85       	ldd	r19, Y+8	; 0x08
    1112:	23 30       	cpi	r18, 0x03	; 3
    1114:	31 05       	cpc	r19, r1
    1116:	34 f4       	brge	.+12     	; 0x1124 <M_DIO_Void_SetPinValue+0x7c>
    1118:	8f 81       	ldd	r24, Y+7	; 0x07
    111a:	98 85       	ldd	r25, Y+8	; 0x08
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	91 05       	cpc	r25, r1
    1120:	69 f0       	breq	.+26     	; 0x113c <M_DIO_Void_SetPinValue+0x94>
    1122:	cf c0       	rjmp	.+414    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
    1124:	2f 81       	ldd	r18, Y+7	; 0x07
    1126:	38 85       	ldd	r19, Y+8	; 0x08
    1128:	23 30       	cpi	r18, 0x03	; 3
    112a:	31 05       	cpc	r19, r1
    112c:	89 f1       	breq	.+98     	; 0x1190 <M_DIO_Void_SetPinValue+0xe8>
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	98 85       	ldd	r25, Y+8	; 0x08
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <M_DIO_Void_SetPinValue+0x92>
    1138:	40 c0       	rjmp	.+128    	; 0x11ba <M_DIO_Void_SetPinValue+0x112>
    113a:	c3 c0       	rjmp	.+390    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    113c:	ab e3       	ldi	r26, 0x3B	; 59
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	eb e3       	ldi	r30, 0x3B	; 59
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <M_DIO_Void_SetPinValue+0xb2>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <M_DIO_Void_SetPinValue+0xae>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	ae c0       	rjmp	.+348    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1166:	a8 e3       	ldi	r26, 0x38	; 56
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e8 e3       	ldi	r30, 0x38	; 56
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <M_DIO_Void_SetPinValue+0xdc>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <M_DIO_Void_SetPinValue+0xd8>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	99 c0       	rjmp	.+306    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1190:	a5 e3       	ldi	r26, 0x35	; 53
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e3       	ldi	r30, 0x35	; 53
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <M_DIO_Void_SetPinValue+0x106>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <M_DIO_Void_SetPinValue+0x102>
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	84 c0       	rjmp	.+264    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    11ba:	a2 e3       	ldi	r26, 0x32	; 50
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e2 e3       	ldi	r30, 0x32	; 50
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <M_DIO_Void_SetPinValue+0x130>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <M_DIO_Void_SetPinValue+0x12c>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	6f c0       	rjmp	.+222    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
	case HIGH:
		switch(Local_U8_Group)
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3e 83       	std	Y+6, r19	; 0x06
    11ec:	2d 83       	std	Y+5, r18	; 0x05
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	91 05       	cpc	r25, r1
    11f6:	51 f1       	breq	.+84     	; 0x124c <M_DIO_Void_SetPinValue+0x1a4>
    11f8:	2d 81       	ldd	r18, Y+5	; 0x05
    11fa:	3e 81       	ldd	r19, Y+6	; 0x06
    11fc:	23 30       	cpi	r18, 0x03	; 3
    11fe:	31 05       	cpc	r19, r1
    1200:	34 f4       	brge	.+12     	; 0x120e <M_DIO_Void_SetPinValue+0x166>
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	61 f0       	breq	.+24     	; 0x1224 <M_DIO_Void_SetPinValue+0x17c>
    120c:	5a c0       	rjmp	.+180    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
    120e:	2d 81       	ldd	r18, Y+5	; 0x05
    1210:	3e 81       	ldd	r19, Y+6	; 0x06
    1212:	23 30       	cpi	r18, 0x03	; 3
    1214:	31 05       	cpc	r19, r1
    1216:	71 f1       	breq	.+92     	; 0x1274 <M_DIO_Void_SetPinValue+0x1cc>
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	91 05       	cpc	r25, r1
    1220:	e9 f1       	breq	.+122    	; 0x129c <M_DIO_Void_SetPinValue+0x1f4>
    1222:	4f c0       	rjmp	.+158    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1224:	ab e3       	ldi	r26, 0x3B	; 59
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <M_DIO_Void_SetPinValue+0x19a>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <M_DIO_Void_SetPinValue+0x196>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	3b c0       	rjmp	.+118    	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <M_DIO_Void_SetPinValue+0x1c2>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <M_DIO_Void_SetPinValue+0x1be>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	27 c0       	rjmp	.+78     	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1274:	a5 e3       	ldi	r26, 0x35	; 53
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e3       	ldi	r30, 0x35	; 53
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <M_DIO_Void_SetPinValue+0x1ea>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <M_DIO_Void_SetPinValue+0x1e6>
    1296:	84 2b       	or	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	13 c0       	rjmp	.+38     	; 0x12c2 <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    129c:	a2 e3       	ldi	r26, 0x32	; 50
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <M_DIO_Void_SetPinValue+0x212>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <M_DIO_Void_SetPinValue+0x20e>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    12c2:	2a 96       	adiw	r28, 0x0a	; 10
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <M_DIO_Void_GetPinValue+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <M_DIO_Void_GetPinValue+0x8>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <M_DIO_Void_GetPinValue+0xa>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9a e0       	ldi	r25, 0x0A	; 10
    12e8:	69 2f       	mov	r22, r25
    12ea:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    12ee:	89 2f       	mov	r24, r25
    12f0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9a e0       	ldi	r25, 0x0A	; 10
    12f6:	69 2f       	mov	r22, r25
    12f8:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    12fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    12fe:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3e 83       	std	Y+6, r19	; 0x06
    1308:	2d 83       	std	Y+5, r18	; 0x05
    130a:	4d 81       	ldd	r20, Y+5	; 0x05
    130c:	5e 81       	ldd	r21, Y+6	; 0x06
    130e:	42 30       	cpi	r20, 0x02	; 2
    1310:	51 05       	cpc	r21, r1
    1312:	41 f1       	breq	.+80     	; 0x1364 <M_DIO_Void_GetPinValue+0x90>
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	91 05       	cpc	r25, r1
    131c:	34 f4       	brge	.+12     	; 0x132a <M_DIO_Void_GetPinValue+0x56>
    131e:	2d 81       	ldd	r18, Y+5	; 0x05
    1320:	3e 81       	ldd	r19, Y+6	; 0x06
    1322:	21 30       	cpi	r18, 0x01	; 1
    1324:	31 05       	cpc	r19, r1
    1326:	61 f0       	breq	.+24     	; 0x1340 <M_DIO_Void_GetPinValue+0x6c>
    1328:	52 c0       	rjmp	.+164    	; 0x13ce <M_DIO_Void_GetPinValue+0xfa>
    132a:	4d 81       	ldd	r20, Y+5	; 0x05
    132c:	5e 81       	ldd	r21, Y+6	; 0x06
    132e:	43 30       	cpi	r20, 0x03	; 3
    1330:	51 05       	cpc	r21, r1
    1332:	51 f1       	breq	.+84     	; 0x1388 <M_DIO_Void_GetPinValue+0xb4>
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	91 05       	cpc	r25, r1
    133c:	b9 f1       	breq	.+110    	; 0x13ac <M_DIO_Void_GetPinValue+0xd8>
    133e:	47 c0       	rjmp	.+142    	; 0x13ce <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    1340:	e9 e3       	ldi	r30, 0x39	; 57
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <M_DIO_Void_GetPinValue+0x84>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <M_DIO_Void_GetPinValue+0x80>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	35 c0       	rjmp	.+106    	; 0x13ce <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1364:	e6 e3       	ldi	r30, 0x36	; 54
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <M_DIO_Void_GetPinValue+0xa8>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <M_DIO_Void_GetPinValue+0xa4>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	23 c0       	rjmp	.+70     	; 0x13ce <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1388:	e3 e3       	ldi	r30, 0x33	; 51
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <M_DIO_Void_GetPinValue+0xcc>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <M_DIO_Void_GetPinValue+0xc8>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	11 c0       	rjmp	.+34     	; 0x13ce <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    13ac:	e0 e3       	ldi	r30, 0x30	; 48
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <M_DIO_Void_GetPinValue+0xf0>
    13c0:	55 95       	asr	r21
    13c2:	47 95       	ror	r20
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <M_DIO_Void_GetPinValue+0xec>
    13c8:	ca 01       	movw	r24, r20
    13ca:	81 70       	andi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d0:	26 96       	adiw	r28, 0x06	; 6
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <M_DIO_Void_TogPin+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <M_DIO_Void_TogPin+0x8>
    13ea:	0f 92       	push	r0
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9a e0       	ldi	r25, 0x0A	; 10
    13f6:	69 2f       	mov	r22, r25
    13f8:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    13fc:	89 2f       	mov	r24, r25
    13fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9a e0       	ldi	r25, 0x0A	; 10
    1404:	69 2f       	mov	r22, r25
    1406:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    140a:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	3d 83       	std	Y+5, r19	; 0x05
    1414:	2c 83       	std	Y+4, r18	; 0x04
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	82 30       	cpi	r24, 0x02	; 2
    141c:	91 05       	cpc	r25, r1
    141e:	51 f1       	breq	.+84     	; 0x1474 <M_DIO_Void_TogPin+0x92>
    1420:	2c 81       	ldd	r18, Y+4	; 0x04
    1422:	3d 81       	ldd	r19, Y+5	; 0x05
    1424:	23 30       	cpi	r18, 0x03	; 3
    1426:	31 05       	cpc	r19, r1
    1428:	34 f4       	brge	.+12     	; 0x1436 <M_DIO_Void_TogPin+0x54>
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	61 f0       	breq	.+24     	; 0x144c <M_DIO_Void_TogPin+0x6a>
    1434:	5a c0       	rjmp	.+180    	; 0x14ea <M_DIO_Void_TogPin+0x108>
    1436:	2c 81       	ldd	r18, Y+4	; 0x04
    1438:	3d 81       	ldd	r19, Y+5	; 0x05
    143a:	23 30       	cpi	r18, 0x03	; 3
    143c:	31 05       	cpc	r19, r1
    143e:	71 f1       	breq	.+92     	; 0x149c <M_DIO_Void_TogPin+0xba>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	84 30       	cpi	r24, 0x04	; 4
    1446:	91 05       	cpc	r25, r1
    1448:	e9 f1       	breq	.+122    	; 0x14c4 <M_DIO_Void_TogPin+0xe2>
    144a:	4f c0       	rjmp	.+158    	; 0x14ea <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    144c:	ab e3       	ldi	r26, 0x3B	; 59
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e3       	ldi	r30, 0x3B	; 59
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <M_DIO_Void_TogPin+0x88>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <M_DIO_Void_TogPin+0x84>
    146e:	84 27       	eor	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	3b c0       	rjmp	.+118    	; 0x14ea <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    1474:	a8 e3       	ldi	r26, 0x38	; 56
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e8 e3       	ldi	r30, 0x38	; 56
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <M_DIO_Void_TogPin+0xb0>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <M_DIO_Void_TogPin+0xac>
    1496:	84 27       	eor	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	27 c0       	rjmp	.+78     	; 0x14ea <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    149c:	a5 e3       	ldi	r26, 0x35	; 53
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e3       	ldi	r30, 0x35	; 53
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <M_DIO_Void_TogPin+0xd8>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <M_DIO_Void_TogPin+0xd4>
    14be:	84 27       	eor	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	13 c0       	rjmp	.+38     	; 0x14ea <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    14c4:	a2 e3       	ldi	r26, 0x32	; 50
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e2 e3       	ldi	r30, 0x32	; 50
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <M_DIO_Void_TogPin+0x100>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <M_DIO_Void_TogPin+0xfc>
    14e6:	84 27       	eor	r24, r20
    14e8:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	2a 97       	sbiw	r28, 0x0a	; 10
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	8b 83       	std	Y+3, r24	; 0x03
    1510:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9a e0       	ldi	r25, 0x0A	; 10
    1516:	69 2f       	mov	r22, r25
    1518:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    151c:	89 2f       	mov	r24, r25
    151e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9a e0       	ldi	r25, 0x0A	; 10
    1524:	69 2f       	mov	r22, r25
    1526:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodqi4>
    152a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3a 87       	std	Y+10, r19	; 0x0a
    1534:	29 87       	std	Y+9, r18	; 0x09
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	39 f0       	breq	.+14     	; 0x154c <M_DIO_Void_SetPinPullUpRes+0x52>
    153e:	29 85       	ldd	r18, Y+9	; 0x09
    1540:	3a 85       	ldd	r19, Y+10	; 0x0a
    1542:	21 30       	cpi	r18, 0x01	; 1
    1544:	31 05       	cpc	r19, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <M_DIO_Void_SetPinPullUpRes+0x50>
    1548:	76 c0       	rjmp	.+236    	; 0x1636 <M_DIO_Void_SetPinPullUpRes+0x13c>
    154a:	e4 c0       	rjmp	.+456    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	38 87       	std	Y+8, r19	; 0x08
    1554:	2f 83       	std	Y+7, r18	; 0x07
    1556:	8f 81       	ldd	r24, Y+7	; 0x07
    1558:	98 85       	ldd	r25, Y+8	; 0x08
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	91 05       	cpc	r25, r1
    155e:	61 f1       	breq	.+88     	; 0x15b8 <M_DIO_Void_SetPinPullUpRes+0xbe>
    1560:	2f 81       	ldd	r18, Y+7	; 0x07
    1562:	38 85       	ldd	r19, Y+8	; 0x08
    1564:	23 30       	cpi	r18, 0x03	; 3
    1566:	31 05       	cpc	r19, r1
    1568:	34 f4       	brge	.+12     	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x7c>
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	91 05       	cpc	r25, r1
    1572:	69 f0       	breq	.+26     	; 0x158e <M_DIO_Void_SetPinPullUpRes+0x94>
    1574:	cf c0       	rjmp	.+414    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1576:	2f 81       	ldd	r18, Y+7	; 0x07
    1578:	38 85       	ldd	r19, Y+8	; 0x08
    157a:	23 30       	cpi	r18, 0x03	; 3
    157c:	31 05       	cpc	r19, r1
    157e:	89 f1       	breq	.+98     	; 0x15e2 <M_DIO_Void_SetPinPullUpRes+0xe8>
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	91 05       	cpc	r25, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <M_DIO_Void_SetPinPullUpRes+0x92>
    158a:	40 c0       	rjmp	.+128    	; 0x160c <M_DIO_Void_SetPinPullUpRes+0x112>
    158c:	c3 c0       	rjmp	.+390    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    158e:	ab e3       	ldi	r26, 0x3B	; 59
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	eb e3       	ldi	r30, 0x3B	; 59
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <M_DIO_Void_SetPinPullUpRes+0xb2>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <M_DIO_Void_SetPinPullUpRes+0xae>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	ae c0       	rjmp	.+348    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    15b8:	a8 e3       	ldi	r26, 0x38	; 56
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <M_DIO_Void_SetPinPullUpRes+0xdc>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <M_DIO_Void_SetPinPullUpRes+0xd8>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	99 c0       	rjmp	.+306    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    15e2:	a5 e3       	ldi	r26, 0x35	; 53
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e3       	ldi	r30, 0x35	; 53
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <M_DIO_Void_SetPinPullUpRes+0x106>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <M_DIO_Void_SetPinPullUpRes+0x102>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	84 c0       	rjmp	.+264    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    160c:	a2 e3       	ldi	r26, 0x32	; 50
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e2 e3       	ldi	r30, 0x32	; 50
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <M_DIO_Void_SetPinPullUpRes+0x130>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <M_DIO_Void_SetPinPullUpRes+0x12c>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	6f c0       	rjmp	.+222    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
	case ENABLE:
		switch(Local_U8_Group)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3e 83       	std	Y+6, r19	; 0x06
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	91 05       	cpc	r25, r1
    1648:	51 f1       	breq	.+84     	; 0x169e <M_DIO_Void_SetPinPullUpRes+0x1a4>
    164a:	2d 81       	ldd	r18, Y+5	; 0x05
    164c:	3e 81       	ldd	r19, Y+6	; 0x06
    164e:	23 30       	cpi	r18, 0x03	; 3
    1650:	31 05       	cpc	r19, r1
    1652:	34 f4       	brge	.+12     	; 0x1660 <M_DIO_Void_SetPinPullUpRes+0x166>
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	9e 81       	ldd	r25, Y+6	; 0x06
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	61 f0       	breq	.+24     	; 0x1676 <M_DIO_Void_SetPinPullUpRes+0x17c>
    165e:	5a c0       	rjmp	.+180    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
    1660:	2d 81       	ldd	r18, Y+5	; 0x05
    1662:	3e 81       	ldd	r19, Y+6	; 0x06
    1664:	23 30       	cpi	r18, 0x03	; 3
    1666:	31 05       	cpc	r19, r1
    1668:	71 f1       	breq	.+92     	; 0x16c6 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	91 05       	cpc	r25, r1
    1672:	e9 f1       	breq	.+122    	; 0x16ee <M_DIO_Void_SetPinPullUpRes+0x1f4>
    1674:	4f c0       	rjmp	.+158    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1676:	ab e3       	ldi	r26, 0x3B	; 59
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <M_DIO_Void_SetPinPullUpRes+0x19a>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <M_DIO_Void_SetPinPullUpRes+0x196>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	3b c0       	rjmp	.+118    	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    169e:	a8 e3       	ldi	r26, 0x38	; 56
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <M_DIO_Void_SetPinPullUpRes+0x1c2>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <M_DIO_Void_SetPinPullUpRes+0x1be>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	27 c0       	rjmp	.+78     	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    16c6:	a5 e3       	ldi	r26, 0x35	; 53
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e3       	ldi	r30, 0x35	; 53
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <M_DIO_Void_SetPinPullUpRes+0x1ea>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <M_DIO_Void_SetPinPullUpRes+0x1e6>
    16e8:	84 2b       	or	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	13 c0       	rjmp	.+38     	; 0x1714 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    16ee:	a2 e3       	ldi	r26, 0x32	; 50
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <M_DIO_Void_SetPinPullUpRes+0x212>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <M_DIO_Void_SetPinPullUpRes+0x20e>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    1714:	2a 96       	adiw	r28, 0x0a	; 10
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    172e:	80 e2       	ldi	r24, 0x20	; 32
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1736:	81 e2       	ldi	r24, 0x21	; 33
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    173e:	82 e2       	ldi	r24, 0x22	; 34
    1740:	61 e0       	ldi	r22, 0x01	; 1
    1742:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1746:	83 e2       	ldi	r24, 0x23	; 35
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    174e:	8e e1       	ldi	r24, 0x1E	; 30
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1756:	8f e1       	ldi	r24, 0x1F	; 31
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    175e:	83 e3       	ldi	r24, 0x33	; 51
    1760:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1764:	82 e3       	ldi	r24, 0x32	; 50
    1766:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    176a:	88 e2       	ldi	r24, 0x28	; 40
    176c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1770:	8c e0       	ldi	r24, 0x0C	; 12
    1772:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>

#endif
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	ab 97       	sbiw	r28, 0x2b	; 43
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	8b a7       	std	Y+43, r24	; 0x2b
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    179e:	8e e1       	ldi	r24, 0x1E	; 30
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    17a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a8:	82 95       	swap	r24
    17aa:	8f 70       	andi	r24, 0x0F	; 15
    17ac:	98 2f       	mov	r25, r24
    17ae:	91 70       	andi	r25, 0x01	; 1
    17b0:	80 e2       	ldi	r24, 0x20	; 32
    17b2:	69 2f       	mov	r22, r25
    17b4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    17b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ba:	82 95       	swap	r24
    17bc:	86 95       	lsr	r24
    17be:	87 70       	andi	r24, 0x07	; 7
    17c0:	98 2f       	mov	r25, r24
    17c2:	91 70       	andi	r25, 0x01	; 1
    17c4:	81 e2       	ldi	r24, 0x21	; 33
    17c6:	69 2f       	mov	r22, r25
    17c8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    17cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ce:	82 95       	swap	r24
    17d0:	86 95       	lsr	r24
    17d2:	86 95       	lsr	r24
    17d4:	83 70       	andi	r24, 0x03	; 3
    17d6:	98 2f       	mov	r25, r24
    17d8:	91 70       	andi	r25, 0x01	; 1
    17da:	82 e2       	ldi	r24, 0x22	; 34
    17dc:	69 2f       	mov	r22, r25
    17de:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    17e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17e4:	98 2f       	mov	r25, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	99 27       	eor	r25, r25
    17ea:	99 1f       	adc	r25, r25
    17ec:	83 e2       	ldi	r24, 0x23	; 35
    17ee:	69 2f       	mov	r22, r25
    17f0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    17f4:	8f e1       	ldi	r24, 0x1F	; 31
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e8       	ldi	r26, 0x80	; 128
    1802:	bf e3       	ldi	r27, 0x3F	; 63
    1804:	8f a3       	std	Y+39, r24	; 0x27
    1806:	98 a7       	std	Y+40, r25	; 0x28
    1808:	a9 a7       	std	Y+41, r26	; 0x29
    180a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180c:	6f a1       	ldd	r22, Y+39	; 0x27
    180e:	78 a5       	ldd	r23, Y+40	; 0x28
    1810:	89 a5       	ldd	r24, Y+41	; 0x29
    1812:	9a a5       	ldd	r25, Y+42	; 0x2a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a e7       	ldi	r20, 0x7A	; 122
    181a:	55 e4       	ldi	r21, 0x45	; 69
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8b a3       	std	Y+35, r24	; 0x23
    1826:	9c a3       	std	Y+36, r25	; 0x24
    1828:	ad a3       	std	Y+37, r26	; 0x25
    182a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    182c:	6b a1       	ldd	r22, Y+35	; 0x23
    182e:	7c a1       	ldd	r23, Y+36	; 0x24
    1830:	8d a1       	ldd	r24, Y+37	; 0x25
    1832:	9e a1       	ldd	r25, Y+38	; 0x26
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1840:	88 23       	and	r24, r24
    1842:	2c f4       	brge	.+10     	; 0x184e <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9a a3       	std	Y+34, r25	; 0x22
    184a:	89 a3       	std	Y+33, r24	; 0x21
    184c:	3f c0       	rjmp	.+126    	; 0x18cc <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    184e:	6b a1       	ldd	r22, Y+35	; 0x23
    1850:	7c a1       	ldd	r23, Y+36	; 0x24
    1852:	8d a1       	ldd	r24, Y+37	; 0x25
    1854:	9e a1       	ldd	r25, Y+38	; 0x26
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	3f ef       	ldi	r19, 0xFF	; 255
    185a:	4f e7       	ldi	r20, 0x7F	; 127
    185c:	57 e4       	ldi	r21, 0x47	; 71
    185e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1862:	18 16       	cp	r1, r24
    1864:	4c f5       	brge	.+82     	; 0x18b8 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1866:	6f a1       	ldd	r22, Y+39	; 0x27
    1868:	78 a5       	ldd	r23, Y+40	; 0x28
    186a:	89 a5       	ldd	r24, Y+41	; 0x29
    186c:	9a a5       	ldd	r25, Y+42	; 0x2a
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9a a3       	std	Y+34, r25	; 0x22
    188c:	89 a3       	std	Y+33, r24	; 0x21
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <H_Lcd_Void_LCDWriteCharacter+0x126>
    1890:	80 e9       	ldi	r24, 0x90	; 144
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	98 a3       	std	Y+32, r25	; 0x20
    1896:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1898:	8f 8d       	ldd	r24, Y+31	; 0x1f
    189a:	98 a1       	ldd	r25, Y+32	; 0x20
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <H_Lcd_Void_LCDWriteCharacter+0x114>
    18a0:	98 a3       	std	Y+32, r25	; 0x20
    18a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	89 a1       	ldd	r24, Y+33	; 0x21
    18a6:	9a a1       	ldd	r25, Y+34	; 0x22
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	9a a3       	std	Y+34, r25	; 0x22
    18ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	89 a1       	ldd	r24, Y+33	; 0x21
    18b0:	9a a1       	ldd	r25, Y+34	; 0x22
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f7       	brne	.-38     	; 0x1890 <H_Lcd_Void_LCDWriteCharacter+0x108>
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ba:	7c a1       	ldd	r23, Y+36	; 0x24
    18bc:	8d a1       	ldd	r24, Y+37	; 0x25
    18be:	9e a1       	ldd	r25, Y+38	; 0x26
    18c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9a a3       	std	Y+34, r25	; 0x22
    18ca:	89 a3       	std	Y+33, r24	; 0x21
    18cc:	89 a1       	ldd	r24, Y+33	; 0x21
    18ce:	9a a1       	ldd	r25, Y+34	; 0x22
    18d0:	9e 8f       	std	Y+30, r25	; 0x1e
    18d2:	8d 8f       	std	Y+29, r24	; 0x1d
    18d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <H_Lcd_Void_LCDWriteCharacter+0x150>
    18dc:	9e 8f       	std	Y+30, r25	; 0x1e
    18de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    18e0:	8f e1       	ldi	r24, 0x1F	; 31
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	89 8f       	std	Y+25, r24	; 0x19
    18f2:	9a 8f       	std	Y+26, r25	; 0x1a
    18f4:	ab 8f       	std	Y+27, r26	; 0x1b
    18f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	69 8d       	ldd	r22, Y+25	; 0x19
    18fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	55 e4       	ldi	r21, 0x45	; 69
    1908:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8d 8b       	std	Y+21, r24	; 0x15
    1912:	9e 8b       	std	Y+22, r25	; 0x16
    1914:	af 8b       	std	Y+23, r26	; 0x17
    1916:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1918:	6d 89       	ldd	r22, Y+21	; 0x15
    191a:	7e 89       	ldd	r23, Y+22	; 0x16
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    193a:	6d 89       	ldd	r22, Y+21	; 0x15
    193c:	7e 89       	ldd	r23, Y+22	; 0x16
    193e:	8f 89       	ldd	r24, Y+23	; 0x17
    1940:	98 8d       	ldd	r25, Y+24	; 0x18
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	69 8d       	ldd	r22, Y+25	; 0x19
    1954:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9c 8b       	std	Y+20, r25	; 0x14
    1978:	8b 8b       	std	Y+19, r24	; 0x13
    197a:	0f c0       	rjmp	.+30     	; 0x199a <H_Lcd_Void_LCDWriteCharacter+0x212>
    197c:	80 e9       	ldi	r24, 0x90	; 144
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	9a 8b       	std	Y+18, r25	; 0x12
    1982:	89 8b       	std	Y+17, r24	; 0x11
    1984:	89 89       	ldd	r24, Y+17	; 0x11
    1986:	9a 89       	ldd	r25, Y+18	; 0x12
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <H_Lcd_Void_LCDWriteCharacter+0x200>
    198c:	9a 8b       	std	Y+18, r25	; 0x12
    198e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9c 8b       	std	Y+20, r25	; 0x14
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
    19b8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ba:	9c 89       	ldd	r25, Y+20	; 0x14
    19bc:	98 8b       	std	Y+16, r25	; 0x10
    19be:	8f 87       	std	Y+15, r24	; 0x0f
    19c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c2:	98 89       	ldd	r25, Y+16	; 0x10
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    19c8:	98 8b       	std	Y+16, r25	; 0x10
    19ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    19cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ce:	98 2f       	mov	r25, r24
    19d0:	91 70       	andi	r25, 0x01	; 1
    19d2:	80 e2       	ldi	r24, 0x20	; 32
    19d4:	69 2f       	mov	r22, r25
    19d6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    19da:	8b a5       	ldd	r24, Y+43	; 0x2b
    19dc:	86 95       	lsr	r24
    19de:	98 2f       	mov	r25, r24
    19e0:	91 70       	andi	r25, 0x01	; 1
    19e2:	81 e2       	ldi	r24, 0x21	; 33
    19e4:	69 2f       	mov	r22, r25
    19e6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    19ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ec:	86 95       	lsr	r24
    19ee:	86 95       	lsr	r24
    19f0:	98 2f       	mov	r25, r24
    19f2:	91 70       	andi	r25, 0x01	; 1
    19f4:	82 e2       	ldi	r24, 0x22	; 34
    19f6:	69 2f       	mov	r22, r25
    19f8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    19fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19fe:	86 95       	lsr	r24
    1a00:	86 95       	lsr	r24
    1a02:	86 95       	lsr	r24
    1a04:	98 2f       	mov	r25, r24
    1a06:	91 70       	andi	r25, 0x01	; 1
    1a08:	83 e2       	ldi	r24, 0x23	; 35
    1a0a:	69 2f       	mov	r22, r25
    1a0c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1a10:	8f e1       	ldi	r24, 0x1F	; 31
    1a12:	61 e0       	ldi	r22, 0x01	; 1
    1a14:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a0 e8       	ldi	r26, 0x80	; 128
    1a1e:	bf e3       	ldi	r27, 0x3F	; 63
    1a20:	8b 87       	std	Y+11, r24	; 0x0b
    1a22:	9c 87       	std	Y+12, r25	; 0x0c
    1a24:	ad 87       	std	Y+13, r26	; 0x0d
    1a26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a e7       	ldi	r20, 0x7A	; 122
    1a36:	55 e4       	ldi	r21, 0x45	; 69
    1a38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8f 83       	std	Y+7, r24	; 0x07
    1a42:	98 87       	std	Y+8, r25	; 0x08
    1a44:	a9 87       	std	Y+9, r26	; 0x09
    1a46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	78 85       	ldd	r23, Y+8	; 0x08
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e8       	ldi	r20, 0x80	; 128
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	3f ef       	ldi	r19, 0xFF	; 255
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	57 e4       	ldi	r21, 0x47	; 71
    1a7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	4c f5       	brge	.+82     	; 0x1ad4 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <H_Lcd_Void_LCDWriteCharacter+0x342>
    1aac:	80 e9       	ldi	r24, 0x90	; 144
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <H_Lcd_Void_LCDWriteCharacter+0x330>
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <H_Lcd_Void_LCDWriteCharacter+0x324>
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1afc:	8f e1       	ldi	r24, 0x1F	; 31
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	//_delay_ms(5);
#endif
}
    1b04:	ab 96       	adiw	r28, 0x2b	; 43
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	e9 97       	sbiw	r28, 0x39	; 57
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1b2c:	8e e1       	ldi	r24, 0x1E	; 30
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    1b34:	89 ad       	ldd	r24, Y+57	; 0x39
    1b36:	82 95       	swap	r24
    1b38:	8f 70       	andi	r24, 0x0F	; 15
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	91 70       	andi	r25, 0x01	; 1
    1b3e:	80 e2       	ldi	r24, 0x20	; 32
    1b40:	69 2f       	mov	r22, r25
    1b42:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    1b46:	89 ad       	ldd	r24, Y+57	; 0x39
    1b48:	82 95       	swap	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	87 70       	andi	r24, 0x07	; 7
    1b4e:	98 2f       	mov	r25, r24
    1b50:	91 70       	andi	r25, 0x01	; 1
    1b52:	81 e2       	ldi	r24, 0x21	; 33
    1b54:	69 2f       	mov	r22, r25
    1b56:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    1b5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b5c:	82 95       	swap	r24
    1b5e:	86 95       	lsr	r24
    1b60:	86 95       	lsr	r24
    1b62:	83 70       	andi	r24, 0x03	; 3
    1b64:	98 2f       	mov	r25, r24
    1b66:	91 70       	andi	r25, 0x01	; 1
    1b68:	82 e2       	ldi	r24, 0x22	; 34
    1b6a:	69 2f       	mov	r22, r25
    1b6c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    1b70:	89 ad       	ldd	r24, Y+57	; 0x39
    1b72:	98 2f       	mov	r25, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	99 27       	eor	r25, r25
    1b78:	99 1f       	adc	r25, r25
    1b7a:	83 e2       	ldi	r24, 0x23	; 35
    1b7c:	69 2f       	mov	r22, r25
    1b7e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1b82:	8f e1       	ldi	r24, 0x1F	; 31
    1b84:	61 e0       	ldi	r22, 0x01	; 1
    1b86:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	8d ab       	std	Y+53, r24	; 0x35
    1b94:	9e ab       	std	Y+54, r25	; 0x36
    1b96:	af ab       	std	Y+55, r26	; 0x37
    1b98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	55 e4       	ldi	r21, 0x45	; 69
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	89 ab       	std	Y+49, r24	; 0x31
    1bb4:	9a ab       	std	Y+50, r25	; 0x32
    1bb6:	ab ab       	std	Y+51, r26	; 0x33
    1bb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bba:	69 a9       	ldd	r22, Y+49	; 0x31
    1bbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	98 ab       	std	Y+48, r25	; 0x30
    1bd8:	8f a7       	std	Y+47, r24	; 0x2f
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    1bdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bde:	7a a9       	ldd	r23, Y+50	; 0x32
    1be0:	8b a9       	ldd	r24, Y+51	; 0x33
    1be2:	9c a9       	ldd	r25, Y+52	; 0x34
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf6:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf8:	8f a9       	ldd	r24, Y+55	; 0x37
    1bfa:	98 ad       	ldd	r25, Y+56	; 0x38
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	98 ab       	std	Y+48, r25	; 0x30
    1c1a:	8f a7       	std	Y+47, r24	; 0x2f
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <H_Lcd_Void_LCDWriteCommand+0x126>
    1c1e:	80 e9       	ldi	r24, 0x90	; 144
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	9e a7       	std	Y+46, r25	; 0x2e
    1c24:	8d a7       	std	Y+45, r24	; 0x2d
    1c26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <H_Lcd_Void_LCDWriteCommand+0x114>
    1c2e:	9e a7       	std	Y+46, r25	; 0x2e
    1c30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c34:	98 a9       	ldd	r25, Y+48	; 0x30
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	98 ab       	std	Y+48, r25	; 0x30
    1c3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <H_Lcd_Void_LCDWriteCommand+0x108>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	69 a9       	ldd	r22, Y+49	; 0x31
    1c48:	7a a9       	ldd	r23, Y+50	; 0x32
    1c4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	98 ab       	std	Y+48, r25	; 0x30
    1c58:	8f a7       	std	Y+47, r24	; 0x2f
    1c5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5e:	9c a7       	std	Y+44, r25	; 0x2c
    1c60:	8b a7       	std	Y+43, r24	; 0x2b
    1c62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <H_Lcd_Void_LCDWriteCommand+0x150>
    1c6a:	9c a7       	std	Y+44, r25	; 0x2c
    1c6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1c6e:	8f e1       	ldi	r24, 0x1F	; 31
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	8f a3       	std	Y+39, r24	; 0x27
    1c80:	98 a7       	std	Y+40, r25	; 0x28
    1c82:	a9 a7       	std	Y+41, r26	; 0x29
    1c84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6f a1       	ldd	r22, Y+39	; 0x27
    1c88:	78 a5       	ldd	r23, Y+40	; 0x28
    1c8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	55 e4       	ldi	r21, 0x45	; 69
    1c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8b a3       	std	Y+35, r24	; 0x23
    1ca0:	9c a3       	std	Y+36, r25	; 0x24
    1ca2:	ad a3       	std	Y+37, r26	; 0x25
    1ca4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    1caa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cac:	9e a1       	ldd	r25, Y+38	; 0x26
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9a a3       	std	Y+34, r25	; 0x22
    1d06:	89 a3       	std	Y+33, r24	; 0x21
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <H_Lcd_Void_LCDWriteCommand+0x212>
    1d0a:	80 e9       	ldi	r24, 0x90	; 144
    1d0c:	91 e0       	ldi	r25, 0x01	; 1
    1d0e:	98 a3       	std	Y+32, r25	; 0x20
    1d10:	8f 8f       	std	Y+31, r24	; 0x1f
    1d12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d14:	98 a1       	ldd	r25, Y+32	; 0x20
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <H_Lcd_Void_LCDWriteCommand+0x200>
    1d1a:	98 a3       	std	Y+32, r25	; 0x20
    1d1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d20:	9a a1       	ldd	r25, Y+34	; 0x22
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9a a3       	std	Y+34, r25	; 0x22
    1d26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <H_Lcd_Void_LCDWriteCommand+0x1f4>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	6b a1       	ldd	r22, Y+35	; 0x23
    1d34:	7c a1       	ldd	r23, Y+36	; 0x24
    1d36:	8d a1       	ldd	r24, Y+37	; 0x25
    1d38:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9a a3       	std	Y+34, r25	; 0x22
    1d44:	89 a3       	std	Y+33, r24	; 0x21
    1d46:	89 a1       	ldd	r24, Y+33	; 0x21
    1d48:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d4c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <H_Lcd_Void_LCDWriteCommand+0x23c>
    1d56:	9e 8f       	std	Y+30, r25	; 0x1e
    1d58:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    1d5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	91 70       	andi	r25, 0x01	; 1
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	69 2f       	mov	r22, r25
    1d64:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    1d68:	89 ad       	ldd	r24, Y+57	; 0x39
    1d6a:	86 95       	lsr	r24
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	91 70       	andi	r25, 0x01	; 1
    1d70:	81 e2       	ldi	r24, 0x21	; 33
    1d72:	69 2f       	mov	r22, r25
    1d74:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    1d78:	89 ad       	ldd	r24, Y+57	; 0x39
    1d7a:	86 95       	lsr	r24
    1d7c:	86 95       	lsr	r24
    1d7e:	98 2f       	mov	r25, r24
    1d80:	91 70       	andi	r25, 0x01	; 1
    1d82:	82 e2       	ldi	r24, 0x22	; 34
    1d84:	69 2f       	mov	r22, r25
    1d86:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    1d8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d8c:	86 95       	lsr	r24
    1d8e:	86 95       	lsr	r24
    1d90:	86 95       	lsr	r24
    1d92:	98 2f       	mov	r25, r24
    1d94:	91 70       	andi	r25, 0x01	; 1
    1d96:	83 e2       	ldi	r24, 0x23	; 35
    1d98:	69 2f       	mov	r22, r25
    1d9a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1d9e:	8f e1       	ldi	r24, 0x1F	; 31
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e8       	ldi	r26, 0x80	; 128
    1dac:	bf e3       	ldi	r27, 0x3F	; 63
    1dae:	89 8f       	std	Y+25, r24	; 0x19
    1db0:	9a 8f       	std	Y+26, r25	; 0x1a
    1db2:	ab 8f       	std	Y+27, r26	; 0x1b
    1db4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db6:	69 8d       	ldd	r22, Y+25	; 0x19
    1db8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	4a e7       	ldi	r20, 0x7A	; 122
    1dc4:	55 e4       	ldi	r21, 0x45	; 69
    1dc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	8d 8b       	std	Y+21, r24	; 0x15
    1dd0:	9e 8b       	std	Y+22, r25	; 0x16
    1dd2:	af 8b       	std	Y+23, r26	; 0x17
    1dd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dda:	8f 89       	ldd	r24, Y+23	; 0x17
    1ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	5f e3       	ldi	r21, 0x3F	; 63
    1de6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dea:	88 23       	and	r24, r24
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	3f c0       	rjmp	.+126    	; 0x1e76 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    1df8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	3f ef       	ldi	r19, 0xFF	; 255
    1e04:	4f e7       	ldi	r20, 0x7F	; 127
    1e06:	57 e4       	ldi	r21, 0x47	; 71
    1e08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e0c:	18 16       	cp	r1, r24
    1e0e:	4c f5       	brge	.+82     	; 0x1e62 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	69 8d       	ldd	r22, Y+25	; 0x19
    1e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e2       	ldi	r20, 0x20	; 32
    1e1e:	51 e4       	ldi	r21, 0x41	; 65
    1e20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	bc 01       	movw	r22, r24
    1e2a:	cd 01       	movw	r24, r26
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9c 8b       	std	Y+20, r25	; 0x14
    1e36:	8b 8b       	std	Y+19, r24	; 0x13
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <H_Lcd_Void_LCDWriteCommand+0x342>
    1e3a:	80 e9       	ldi	r24, 0x90	; 144
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	9a 8b       	std	Y+18, r25	; 0x12
    1e40:	89 8b       	std	Y+17, r24	; 0x11
    1e42:	89 89       	ldd	r24, Y+17	; 0x11
    1e44:	9a 89       	ldd	r25, Y+18	; 0x12
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <H_Lcd_Void_LCDWriteCommand+0x330>
    1e4a:	9a 8b       	std	Y+18, r25	; 0x12
    1e4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	9c 8b       	std	Y+20, r25	; 0x14
    1e56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e58:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	69 f7       	brne	.-38     	; 0x1e3a <H_Lcd_Void_LCDWriteCommand+0x324>
    1e60:	14 c0       	rjmp	.+40     	; 0x1e8a <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e62:	6d 89       	ldd	r22, Y+21	; 0x15
    1e64:	7e 89       	ldd	r23, Y+22	; 0x16
    1e66:	8f 89       	ldd	r24, Y+23	; 0x17
    1e68:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	98 8b       	std	Y+16, r25	; 0x10
    1e7c:	8f 87       	std	Y+15, r24	; 0x0f
    1e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e80:	98 89       	ldd	r25, Y+16	; 0x10
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <H_Lcd_Void_LCDWriteCommand+0x36c>
    1e86:	98 8b       	std	Y+16, r25	; 0x10
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1e8a:	8f e1       	ldi	r24, 0x1F	; 31
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 ea       	ldi	r26, 0xA0	; 160
    1e98:	b0 e4       	ldi	r27, 0x40	; 64
    1e9a:	8b 87       	std	Y+11, r24	; 0x0b
    1e9c:	9c 87       	std	Y+12, r25	; 0x0c
    1e9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ea0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a e7       	ldi	r20, 0x7A	; 122
    1eb0:	55 e4       	ldi	r21, 0x45	; 69
    1eb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8f 83       	std	Y+7, r24	; 0x07
    1ebc:	98 87       	std	Y+8, r25	; 0x08
    1ebe:	a9 87       	std	Y+9, r26	; 0x09
    1ec0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec4:	78 85       	ldd	r23, Y+8	; 0x08
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <H_Lcd_Void_LCDWriteCommand+0x42e>
    1f26:	80 e9       	ldi	r24, 0x90	; 144
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	9c 83       	std	Y+4, r25	; 0x04
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <H_Lcd_Void_LCDWriteCommand+0x41c>
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <H_Lcd_Void_LCDWriteCommand+0x410>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <H_Lcd_Void_LCDWriteCommand+0x458>
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    1f76:	e9 96       	adiw	r28, 0x39	; 57
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8* Copy_U8_Ptr)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <H_Lcd_Void_LCDWriteString+0x6>
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    1f98:	19 82       	std	Y+1, r1	; 0x01
    1f9a:	0e c0       	rjmp	.+28     	; 0x1fb8 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	e2 0f       	add	r30, r18
    1faa:	f3 1f       	adc	r31, r19
    1fac:	80 81       	ld	r24, Z
    1fae:	0e 94 c4 0b 	call	0x1788	; 0x1788 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8* Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	80 81       	ld	r24, Z
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	29 f7       	brne	.-54     	; 0x1f9c <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>
}
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	2f 97       	sbiw	r28, 0x0f	; 15
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	6c 87       	std	Y+12, r22	; 0x0c
    200c:	7d 87       	std	Y+13, r23	; 0x0d
    200e:	8e 87       	std	Y+14, r24	; 0x0e
    2010:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    2012:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    2014:	8a e0       	ldi	r24, 0x0A	; 10
    2016:	fe 01       	movw	r30, r28
    2018:	32 96       	adiw	r30, 0x02	; 2
    201a:	df 01       	movw	r26, r30
    201c:	98 2f       	mov	r25, r24
    201e:	1d 92       	st	X+, r1
    2020:	9a 95       	dec	r25
    2022:	e9 f7       	brne	.-6      	; 0x201e <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    2024:	8c 85       	ldd	r24, Y+12	; 0x0c
    2026:	9d 85       	ldd	r25, Y+13	; 0x0d
    2028:	ae 85       	ldd	r26, Y+14	; 0x0e
    202a:	bf 85       	ldd	r27, Y+15	; 0x0f
    202c:	bb 23       	and	r27, r27
    202e:	94 f4       	brge	.+36     	; 0x2054 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    2030:	8c 85       	ldd	r24, Y+12	; 0x0c
    2032:	9d 85       	ldd	r25, Y+13	; 0x0d
    2034:	ae 85       	ldd	r26, Y+14	; 0x0e
    2036:	bf 85       	ldd	r27, Y+15	; 0x0f
    2038:	b0 95       	com	r27
    203a:	a0 95       	com	r26
    203c:	90 95       	com	r25
    203e:	81 95       	neg	r24
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	af 4f       	sbci	r26, 0xFF	; 255
    2044:	bf 4f       	sbci	r27, 0xFF	; 255
    2046:	8c 87       	std	Y+12, r24	; 0x0c
    2048:	9d 87       	std	Y+13, r25	; 0x0d
    204a:	ae 87       	std	Y+14, r26	; 0x0e
    204c:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    204e:	8d e2       	ldi	r24, 0x2D	; 45
    2050:	0e 94 c4 0b 	call	0x1788	; 0x1788 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	08 2f       	mov	r16, r24
    2058:	11 27       	eor	r17, r17
    205a:	07 fd       	sbrc	r16, 7
    205c:	10 95       	com	r17
    205e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2060:	9d 85       	ldd	r25, Y+13	; 0x0d
    2062:	ae 85       	ldd	r26, Y+14	; 0x0e
    2064:	bf 85       	ldd	r27, Y+15	; 0x0f
    2066:	2a e0       	ldi	r18, 0x0A	; 10
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__divmodsi4>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	28 2f       	mov	r18, r24
    207c:	ce 01       	movw	r24, r28
    207e:	02 96       	adiw	r24, 0x02	; 2
    2080:	fc 01       	movw	r30, r24
    2082:	e0 0f       	add	r30, r16
    2084:	f1 1f       	adc	r31, r17
    2086:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2088:	8c 85       	ldd	r24, Y+12	; 0x0c
    208a:	9d 85       	ldd	r25, Y+13	; 0x0d
    208c:	ae 85       	ldd	r26, Y+14	; 0x0e
    208e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2090:	2a e0       	ldi	r18, 0x0A	; 10
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__divmodsi4>
    20a0:	da 01       	movw	r26, r20
    20a2:	c9 01       	movw	r24, r18
    20a4:	8c 87       	std	Y+12, r24	; 0x0c
    20a6:	9d 87       	std	Y+13, r25	; 0x0d
    20a8:	ae 87       	std	Y+14, r26	; 0x0e
    20aa:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    20b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    20b6:	ae 85       	ldd	r26, Y+14	; 0x0e
    20b8:	bf 85       	ldd	r27, Y+15	; 0x0f
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	a1 05       	cpc	r26, r1
    20be:	b1 05       	cpc	r27, r1
    20c0:	49 f6       	brne	.-110    	; 0x2054 <H_Lcd_Void_LCDWriteNumber+0x62>
    20c2:	11 c0       	rjmp	.+34     	; 0x20e6 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	81 50       	subi	r24, 0x01	; 1
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	28 2f       	mov	r18, r24
    20ce:	33 27       	eor	r19, r19
    20d0:	27 fd       	sbrc	r18, 7
    20d2:	30 95       	com	r19
    20d4:	ce 01       	movw	r24, r28
    20d6:	02 96       	adiw	r24, 0x02	; 2
    20d8:	fc 01       	movw	r30, r24
    20da:	e2 0f       	add	r30, r18
    20dc:	f3 1f       	adc	r31, r19
    20de:	80 81       	ld	r24, Z
    20e0:	80 5d       	subi	r24, 0xD0	; 208
    20e2:	0e 94 c4 0b 	call	0x1788	; 0x1788 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	18 16       	cp	r1, r24
    20ea:	64 f3       	brlt	.-40     	; 0x20c4 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    20ec:	2f 96       	adiw	r28, 0x0f	; 15
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <H_Lcd_Void_LCDGoTo+0x6>
    2108:	00 d0       	rcall	.+0      	; 0x210a <H_Lcd_Void_LCDGoTo+0x8>
    210a:	00 d0       	rcall	.+0      	; 0x210c <H_Lcd_Void_LCDGoTo+0xa>
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    2114:	80 e8       	ldi	r24, 0x80	; 128
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	80 ec       	ldi	r24, 0xC0	; 192
    211a:	8a 83       	std	Y+2, r24	; 0x02
    211c:	84 e9       	ldi	r24, 0x94	; 148
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	84 ed       	ldi	r24, 0xD4	; 212
    2122:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	ce 01       	movw	r24, r28
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	fc 01       	movw	r30, r24
    2130:	e2 0f       	add	r30, r18
    2132:	f3 1f       	adc	r31, r19
    2134:	90 81       	ld	r25, Z
    2136:	8e 81       	ldd	r24, Y+6	; 0x06
    2138:	89 0f       	add	r24, r25
    213a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <H_Lcd_Void_LCDWriteCommand>
}
    213e:	26 96       	adiw	r28, 0x06	; 6
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <H_LED_Void_LedInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <H_LED_Void_LedInit+0x6>
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	3b 83       	std	Y+3, r19	; 0x03
    2166:	2a 83       	std	Y+2, r18	; 0x02
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	9b 81       	ldd	r25, Y+3	; 0x03
    216c:	82 30       	cpi	r24, 0x02	; 2
    216e:	91 05       	cpc	r25, r1
    2170:	d9 f0       	breq	.+54     	; 0x21a8 <H_LED_Void_LedInit+0x58>
    2172:	2a 81       	ldd	r18, Y+2	; 0x02
    2174:	3b 81       	ldd	r19, Y+3	; 0x03
    2176:	23 30       	cpi	r18, 0x03	; 3
    2178:	31 05       	cpc	r19, r1
    217a:	34 f4       	brge	.+12     	; 0x2188 <H_LED_Void_LedInit+0x38>
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	61 f0       	breq	.+24     	; 0x219e <H_LED_Void_LedInit+0x4e>
    2186:	1e c0       	rjmp	.+60     	; 0x21c4 <H_LED_Void_LedInit+0x74>
    2188:	2a 81       	ldd	r18, Y+2	; 0x02
    218a:	3b 81       	ldd	r19, Y+3	; 0x03
    218c:	23 30       	cpi	r18, 0x03	; 3
    218e:	31 05       	cpc	r19, r1
    2190:	81 f0       	breq	.+32     	; 0x21b2 <H_LED_Void_LedInit+0x62>
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	84 30       	cpi	r24, 0x04	; 4
    2198:	91 05       	cpc	r25, r1
    219a:	81 f0       	breq	.+32     	; 0x21bc <H_LED_Void_LedInit+0x6c>
    219c:	13 c0       	rjmp	.+38     	; 0x21c4 <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    219e:	80 e1       	ldi	r24, 0x10	; 16
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
    21a6:	0e c0       	rjmp	.+28     	; 0x21c4 <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    21a8:	8f e0       	ldi	r24, 0x0F	; 15
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
    21b0:	09 c0       	rjmp	.+18     	; 0x21c4 <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    21b2:	8e e0       	ldi	r24, 0x0E	; 14
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    21bc:	84 e1       	ldi	r24, 0x14	; 20
    21be:	61 e0       	ldi	r22, 0x01	; 1
    21c0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <H_LED_Void_LedOn+0x6>
    21d6:	0f 92       	push	r0
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	3b 83       	std	Y+3, r19	; 0x03
    21e6:	2a 83       	std	Y+2, r18	; 0x02
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	9b 81       	ldd	r25, Y+3	; 0x03
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	91 05       	cpc	r25, r1
    21f0:	d9 f0       	breq	.+54     	; 0x2228 <H_LED_Void_LedOn+0x58>
    21f2:	2a 81       	ldd	r18, Y+2	; 0x02
    21f4:	3b 81       	ldd	r19, Y+3	; 0x03
    21f6:	23 30       	cpi	r18, 0x03	; 3
    21f8:	31 05       	cpc	r19, r1
    21fa:	34 f4       	brge	.+12     	; 0x2208 <H_LED_Void_LedOn+0x38>
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	91 05       	cpc	r25, r1
    2204:	61 f0       	breq	.+24     	; 0x221e <H_LED_Void_LedOn+0x4e>
    2206:	1e c0       	rjmp	.+60     	; 0x2244 <H_LED_Void_LedOn+0x74>
    2208:	2a 81       	ldd	r18, Y+2	; 0x02
    220a:	3b 81       	ldd	r19, Y+3	; 0x03
    220c:	23 30       	cpi	r18, 0x03	; 3
    220e:	31 05       	cpc	r19, r1
    2210:	81 f0       	breq	.+32     	; 0x2232 <H_LED_Void_LedOn+0x62>
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	9b 81       	ldd	r25, Y+3	; 0x03
    2216:	84 30       	cpi	r24, 0x04	; 4
    2218:	91 05       	cpc	r25, r1
    221a:	81 f0       	breq	.+32     	; 0x223c <H_LED_Void_LedOn+0x6c>
    221c:	13 c0       	rjmp	.+38     	; 0x2244 <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    221e:	80 e1       	ldi	r24, 0x10	; 16
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    2226:	0e c0       	rjmp	.+28     	; 0x2244 <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    2228:	8f e0       	ldi	r24, 0x0F	; 15
    222a:	61 e0       	ldi	r22, 0x01	; 1
    222c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    2230:	09 c0       	rjmp	.+18     	; 0x2244 <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    2232:	8e e0       	ldi	r24, 0x0E	; 14
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    223c:	84 e1       	ldi	r24, 0x14	; 20
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <H_LED_Void_LedOff+0x6>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	3b 83       	std	Y+3, r19	; 0x03
    2266:	2a 83       	std	Y+2, r18	; 0x02
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	91 05       	cpc	r25, r1
    2270:	d9 f0       	breq	.+54     	; 0x22a8 <H_LED_Void_LedOff+0x58>
    2272:	2a 81       	ldd	r18, Y+2	; 0x02
    2274:	3b 81       	ldd	r19, Y+3	; 0x03
    2276:	23 30       	cpi	r18, 0x03	; 3
    2278:	31 05       	cpc	r19, r1
    227a:	34 f4       	brge	.+12     	; 0x2288 <H_LED_Void_LedOff+0x38>
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	81 30       	cpi	r24, 0x01	; 1
    2282:	91 05       	cpc	r25, r1
    2284:	61 f0       	breq	.+24     	; 0x229e <H_LED_Void_LedOff+0x4e>
    2286:	1e c0       	rjmp	.+60     	; 0x22c4 <H_LED_Void_LedOff+0x74>
    2288:	2a 81       	ldd	r18, Y+2	; 0x02
    228a:	3b 81       	ldd	r19, Y+3	; 0x03
    228c:	23 30       	cpi	r18, 0x03	; 3
    228e:	31 05       	cpc	r19, r1
    2290:	81 f0       	breq	.+32     	; 0x22b2 <H_LED_Void_LedOff+0x62>
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	84 30       	cpi	r24, 0x04	; 4
    2298:	91 05       	cpc	r25, r1
    229a:	81 f0       	breq	.+32     	; 0x22bc <H_LED_Void_LedOff+0x6c>
    229c:	13 c0       	rjmp	.+38     	; 0x22c4 <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    229e:	80 e1       	ldi	r24, 0x10	; 16
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    22a8:	8f e0       	ldi	r24, 0x0F	; 15
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    22b0:	09 c0       	rjmp	.+18     	; 0x22c4 <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    22b2:	8e e0       	ldi	r24, 0x0E	; 14
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    22bc:	84 e1       	ldi	r24, 0x14	; 20
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	eb 97       	sbiw	r28, 0x3b	; 59
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    22e6:	89 ad       	ldd	r24, Y+57	; 0x39
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	3b af       	std	Y+59, r19	; 0x3b
    22ee:	2a af       	std	Y+58, r18	; 0x3a
    22f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    22f2:	9b ad       	ldd	r25, Y+59	; 0x3b
    22f4:	82 30       	cpi	r24, 0x02	; 2
    22f6:	91 05       	cpc	r25, r1
    22f8:	09 f4       	brne	.+2      	; 0x22fc <H_LED_Void_LedBlink+0x2c>
    22fa:	93 c0       	rjmp	.+294    	; 0x2422 <H_LED_Void_LedBlink+0x152>
    22fc:	2a ad       	ldd	r18, Y+58	; 0x3a
    22fe:	3b ad       	ldd	r19, Y+59	; 0x3b
    2300:	23 30       	cpi	r18, 0x03	; 3
    2302:	31 05       	cpc	r19, r1
    2304:	34 f4       	brge	.+12     	; 0x2312 <H_LED_Void_LedBlink+0x42>
    2306:	8a ad       	ldd	r24, Y+58	; 0x3a
    2308:	9b ad       	ldd	r25, Y+59	; 0x3b
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	91 05       	cpc	r25, r1
    230e:	71 f0       	breq	.+28     	; 0x232c <H_LED_Void_LedBlink+0x5c>
    2310:	f8 c1       	rjmp	.+1008   	; 0x2702 <H_LED_Void_LedBlink+0x432>
    2312:	2a ad       	ldd	r18, Y+58	; 0x3a
    2314:	3b ad       	ldd	r19, Y+59	; 0x3b
    2316:	23 30       	cpi	r18, 0x03	; 3
    2318:	31 05       	cpc	r19, r1
    231a:	09 f4       	brne	.+2      	; 0x231e <H_LED_Void_LedBlink+0x4e>
    231c:	fd c0       	rjmp	.+506    	; 0x2518 <H_LED_Void_LedBlink+0x248>
    231e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2320:	9b ad       	ldd	r25, Y+59	; 0x3b
    2322:	84 30       	cpi	r24, 0x04	; 4
    2324:	91 05       	cpc	r25, r1
    2326:	09 f4       	brne	.+2      	; 0x232a <H_LED_Void_LedBlink+0x5a>
    2328:	72 c1       	rjmp	.+740    	; 0x260e <H_LED_Void_LedBlink+0x33e>
    232a:	eb c1       	rjmp	.+982    	; 0x2702 <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    232c:	80 e1       	ldi	r24, 0x10	; 16
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	a6 e9       	ldi	r26, 0x96	; 150
    233a:	b3 e4       	ldi	r27, 0x43	; 67
    233c:	8d ab       	std	Y+53, r24	; 0x35
    233e:	9e ab       	std	Y+54, r25	; 0x36
    2340:	af ab       	std	Y+55, r26	; 0x37
    2342:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2344:	6d a9       	ldd	r22, Y+53	; 0x35
    2346:	7e a9       	ldd	r23, Y+54	; 0x36
    2348:	8f a9       	ldd	r24, Y+55	; 0x37
    234a:	98 ad       	ldd	r25, Y+56	; 0x38
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4a e7       	ldi	r20, 0x7A	; 122
    2352:	55 e4       	ldi	r21, 0x45	; 69
    2354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	89 ab       	std	Y+49, r24	; 0x31
    235e:	9a ab       	std	Y+50, r25	; 0x32
    2360:	ab ab       	std	Y+51, r26	; 0x33
    2362:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2364:	69 a9       	ldd	r22, Y+49	; 0x31
    2366:	7a a9       	ldd	r23, Y+50	; 0x32
    2368:	8b a9       	ldd	r24, Y+51	; 0x33
    236a:	9c a9       	ldd	r25, Y+52	; 0x34
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e8       	ldi	r20, 0x80	; 128
    2372:	5f e3       	ldi	r21, 0x3F	; 63
    2374:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2378:	88 23       	and	r24, r24
    237a:	2c f4       	brge	.+10     	; 0x2386 <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	98 ab       	std	Y+48, r25	; 0x30
    2382:	8f a7       	std	Y+47, r24	; 0x2f
    2384:	3f c0       	rjmp	.+126    	; 0x2404 <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    2386:	69 a9       	ldd	r22, Y+49	; 0x31
    2388:	7a a9       	ldd	r23, Y+50	; 0x32
    238a:	8b a9       	ldd	r24, Y+51	; 0x33
    238c:	9c a9       	ldd	r25, Y+52	; 0x34
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	4c f5       	brge	.+82     	; 0x23f0 <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239e:	6d a9       	ldd	r22, Y+53	; 0x35
    23a0:	7e a9       	ldd	r23, Y+54	; 0x36
    23a2:	8f a9       	ldd	r24, Y+55	; 0x37
    23a4:	98 ad       	ldd	r25, Y+56	; 0x38
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e2       	ldi	r20, 0x20	; 32
    23ac:	51 e4       	ldi	r21, 0x41	; 65
    23ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	98 ab       	std	Y+48, r25	; 0x30
    23c4:	8f a7       	std	Y+47, r24	; 0x2f
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <H_LED_Void_LedBlink+0x116>
    23c8:	80 e9       	ldi	r24, 0x90	; 144
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	9e a7       	std	Y+46, r25	; 0x2e
    23ce:	8d a7       	std	Y+45, r24	; 0x2d
    23d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    23d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <H_LED_Void_LedBlink+0x104>
    23d8:	9e a7       	std	Y+46, r25	; 0x2e
    23da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23de:	98 a9       	ldd	r25, Y+48	; 0x30
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	98 ab       	std	Y+48, r25	; 0x30
    23e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	69 f7       	brne	.-38     	; 0x23c8 <H_LED_Void_LedBlink+0xf8>
    23ee:	14 c0       	rjmp	.+40     	; 0x2418 <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f0:	69 a9       	ldd	r22, Y+49	; 0x31
    23f2:	7a a9       	ldd	r23, Y+50	; 0x32
    23f4:	8b a9       	ldd	r24, Y+51	; 0x33
    23f6:	9c a9       	ldd	r25, Y+52	; 0x34
    23f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	98 ab       	std	Y+48, r25	; 0x30
    2402:	8f a7       	std	Y+47, r24	; 0x2f
    2404:	8f a5       	ldd	r24, Y+47	; 0x2f
    2406:	98 a9       	ldd	r25, Y+48	; 0x30
    2408:	9c a7       	std	Y+44, r25	; 0x2c
    240a:	8b a7       	std	Y+43, r24	; 0x2b
    240c:	8b a5       	ldd	r24, Y+43	; 0x2b
    240e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <H_LED_Void_LedBlink+0x140>
    2414:	9c a7       	std	Y+44, r25	; 0x2c
    2416:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    2418:	80 e1       	ldi	r24, 0x10	; 16
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    2420:	70 c1       	rjmp	.+736    	; 0x2702 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    2422:	8f e0       	ldi	r24, 0x0F	; 15
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a6 e9       	ldi	r26, 0x96	; 150
    2430:	b3 e4       	ldi	r27, 0x43	; 67
    2432:	8f a3       	std	Y+39, r24	; 0x27
    2434:	98 a7       	std	Y+40, r25	; 0x28
    2436:	a9 a7       	std	Y+41, r26	; 0x29
    2438:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243a:	6f a1       	ldd	r22, Y+39	; 0x27
    243c:	78 a5       	ldd	r23, Y+40	; 0x28
    243e:	89 a5       	ldd	r24, Y+41	; 0x29
    2440:	9a a5       	ldd	r25, Y+42	; 0x2a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a e7       	ldi	r20, 0x7A	; 122
    2448:	55 e4       	ldi	r21, 0x45	; 69
    244a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	8b a3       	std	Y+35, r24	; 0x23
    2454:	9c a3       	std	Y+36, r25	; 0x24
    2456:	ad a3       	std	Y+37, r26	; 0x25
    2458:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    245a:	6b a1       	ldd	r22, Y+35	; 0x23
    245c:	7c a1       	ldd	r23, Y+36	; 0x24
    245e:	8d a1       	ldd	r24, Y+37	; 0x25
    2460:	9e a1       	ldd	r25, Y+38	; 0x26
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	2c f4       	brge	.+10     	; 0x247c <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9a a3       	std	Y+34, r25	; 0x22
    2478:	89 a3       	std	Y+33, r24	; 0x21
    247a:	3f c0       	rjmp	.+126    	; 0x24fa <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    247c:	6b a1       	ldd	r22, Y+35	; 0x23
    247e:	7c a1       	ldd	r23, Y+36	; 0x24
    2480:	8d a1       	ldd	r24, Y+37	; 0x25
    2482:	9e a1       	ldd	r25, Y+38	; 0x26
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	3f ef       	ldi	r19, 0xFF	; 255
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	57 e4       	ldi	r21, 0x47	; 71
    248c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	4c f5       	brge	.+82     	; 0x24e6 <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2494:	6f a1       	ldd	r22, Y+39	; 0x27
    2496:	78 a5       	ldd	r23, Y+40	; 0x28
    2498:	89 a5       	ldd	r24, Y+41	; 0x29
    249a:	9a a5       	ldd	r25, Y+42	; 0x2a
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e2       	ldi	r20, 0x20	; 32
    24a2:	51 e4       	ldi	r21, 0x41	; 65
    24a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9a a3       	std	Y+34, r25	; 0x22
    24ba:	89 a3       	std	Y+33, r24	; 0x21
    24bc:	0f c0       	rjmp	.+30     	; 0x24dc <H_LED_Void_LedBlink+0x20c>
    24be:	80 e9       	ldi	r24, 0x90	; 144
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	98 a3       	std	Y+32, r25	; 0x20
    24c4:	8f 8f       	std	Y+31, r24	; 0x1f
    24c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c8:	98 a1       	ldd	r25, Y+32	; 0x20
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <H_LED_Void_LedBlink+0x1fa>
    24ce:	98 a3       	std	Y+32, r25	; 0x20
    24d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d2:	89 a1       	ldd	r24, Y+33	; 0x21
    24d4:	9a a1       	ldd	r25, Y+34	; 0x22
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	9a a3       	std	Y+34, r25	; 0x22
    24da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24dc:	89 a1       	ldd	r24, Y+33	; 0x21
    24de:	9a a1       	ldd	r25, Y+34	; 0x22
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	69 f7       	brne	.-38     	; 0x24be <H_LED_Void_LedBlink+0x1ee>
    24e4:	14 c0       	rjmp	.+40     	; 0x250e <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e6:	6b a1       	ldd	r22, Y+35	; 0x23
    24e8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ea:	8d a1       	ldd	r24, Y+37	; 0x25
    24ec:	9e a1       	ldd	r25, Y+38	; 0x26
    24ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9a a3       	std	Y+34, r25	; 0x22
    24f8:	89 a3       	std	Y+33, r24	; 0x21
    24fa:	89 a1       	ldd	r24, Y+33	; 0x21
    24fc:	9a a1       	ldd	r25, Y+34	; 0x22
    24fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2500:	8d 8f       	std	Y+29, r24	; 0x1d
    2502:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2504:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <H_LED_Void_LedBlink+0x236>
    250a:	9e 8f       	std	Y+30, r25	; 0x1e
    250c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    250e:	8f e0       	ldi	r24, 0x0F	; 15
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    2516:	f5 c0       	rjmp	.+490    	; 0x2702 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    2518:	8e e0       	ldi	r24, 0x0E	; 14
    251a:	61 e0       	ldi	r22, 0x01	; 1
    251c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a6 e9       	ldi	r26, 0x96	; 150
    2526:	b3 e4       	ldi	r27, 0x43	; 67
    2528:	89 8f       	std	Y+25, r24	; 0x19
    252a:	9a 8f       	std	Y+26, r25	; 0x1a
    252c:	ab 8f       	std	Y+27, r26	; 0x1b
    252e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2530:	69 8d       	ldd	r22, Y+25	; 0x19
    2532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4a e7       	ldi	r20, 0x7A	; 122
    253e:	55 e4       	ldi	r21, 0x45	; 69
    2540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	8d 8b       	std	Y+21, r24	; 0x15
    254a:	9e 8b       	std	Y+22, r25	; 0x16
    254c:	af 8b       	std	Y+23, r26	; 0x17
    254e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2550:	6d 89       	ldd	r22, Y+21	; 0x15
    2552:	7e 89       	ldd	r23, Y+22	; 0x16
    2554:	8f 89       	ldd	r24, Y+23	; 0x17
    2556:	98 8d       	ldd	r25, Y+24	; 0x18
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e8       	ldi	r20, 0x80	; 128
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2564:	88 23       	and	r24, r24
    2566:	2c f4       	brge	.+10     	; 0x2572 <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
    2570:	3f c0       	rjmp	.+126    	; 0x25f0 <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    2572:	6d 89       	ldd	r22, Y+21	; 0x15
    2574:	7e 89       	ldd	r23, Y+22	; 0x16
    2576:	8f 89       	ldd	r24, Y+23	; 0x17
    2578:	98 8d       	ldd	r25, Y+24	; 0x18
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	3f ef       	ldi	r19, 0xFF	; 255
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	57 e4       	ldi	r21, 0x47	; 71
    2582:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	4c f5       	brge	.+82     	; 0x25dc <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258a:	69 8d       	ldd	r22, Y+25	; 0x19
    258c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <H_LED_Void_LedBlink+0x302>
    25b4:	80 e9       	ldi	r24, 0x90	; 144
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	9a 8b       	std	Y+18, r25	; 0x12
    25ba:	89 8b       	std	Y+17, r24	; 0x11
    25bc:	89 89       	ldd	r24, Y+17	; 0x11
    25be:	9a 89       	ldd	r25, Y+18	; 0x12
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <H_LED_Void_LedBlink+0x2f0>
    25c4:	9a 8b       	std	Y+18, r25	; 0x12
    25c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	9c 8b       	std	Y+20, r25	; 0x14
    25d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	8b 89       	ldd	r24, Y+19	; 0x13
    25d4:	9c 89       	ldd	r25, Y+20	; 0x14
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	69 f7       	brne	.-38     	; 0x25b4 <H_LED_Void_LedBlink+0x2e4>
    25da:	14 c0       	rjmp	.+40     	; 0x2604 <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25dc:	6d 89       	ldd	r22, Y+21	; 0x15
    25de:	7e 89       	ldd	r23, Y+22	; 0x16
    25e0:	8f 89       	ldd	r24, Y+23	; 0x17
    25e2:	98 8d       	ldd	r25, Y+24	; 0x18
    25e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9c 8b       	std	Y+20, r25	; 0x14
    25ee:	8b 8b       	std	Y+19, r24	; 0x13
    25f0:	8b 89       	ldd	r24, Y+19	; 0x13
    25f2:	9c 89       	ldd	r25, Y+20	; 0x14
    25f4:	98 8b       	std	Y+16, r25	; 0x10
    25f6:	8f 87       	std	Y+15, r24	; 0x0f
    25f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fa:	98 89       	ldd	r25, Y+16	; 0x10
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <H_LED_Void_LedBlink+0x32c>
    2600:	98 8b       	std	Y+16, r25	; 0x10
    2602:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    2604:	8e e0       	ldi	r24, 0x0E	; 14
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    260c:	7a c0       	rjmp	.+244    	; 0x2702 <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    260e:	84 e1       	ldi	r24, 0x14	; 20
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a6 e9       	ldi	r26, 0x96	; 150
    261c:	b3 e4       	ldi	r27, 0x43	; 67
    261e:	8b 87       	std	Y+11, r24	; 0x0b
    2620:	9c 87       	std	Y+12, r25	; 0x0c
    2622:	ad 87       	std	Y+13, r26	; 0x0d
    2624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	6b 85       	ldd	r22, Y+11	; 0x0b
    2628:	7c 85       	ldd	r23, Y+12	; 0x0c
    262a:	8d 85       	ldd	r24, Y+13	; 0x0d
    262c:	9e 85       	ldd	r25, Y+14	; 0x0e
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a e7       	ldi	r20, 0x7A	; 122
    2634:	55 e4       	ldi	r21, 0x45	; 69
    2636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8f 83       	std	Y+7, r24	; 0x07
    2640:	98 87       	std	Y+8, r25	; 0x08
    2642:	a9 87       	std	Y+9, r26	; 0x09
    2644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    2668:	6f 81       	ldd	r22, Y+7	; 0x07
    266a:	78 85       	ldd	r23, Y+8	; 0x08
    266c:	89 85       	ldd	r24, Y+9	; 0x09
    266e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	6b 85       	ldd	r22, Y+11	; 0x0b
    2682:	7c 85       	ldd	r23, Y+12	; 0x0c
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <H_LED_Void_LedBlink+0x3f8>
    26aa:	80 e9       	ldi	r24, 0x90	; 144
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <H_LED_Void_LedBlink+0x3e6>
    26ba:	9c 83       	std	Y+4, r25	; 0x04
    26bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <H_LED_Void_LedBlink+0x3da>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <H_LED_Void_LedBlink+0x422>
    26f6:	9a 83       	std	Y+2, r25	; 0x02
    26f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    26fa:	84 e1       	ldi	r24, 0x14	; 20
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	0e 94 54 08 	call	0x10a8	; 0x10a8 <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    2702:	eb 96       	adiw	r28, 0x3b	; 59
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <H_LED_Void_LedTog+0x6>
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	3b 83       	std	Y+3, r19	; 0x03
    272a:	2a 83       	std	Y+2, r18	; 0x02
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	91 05       	cpc	r25, r1
    2734:	d1 f0       	breq	.+52     	; 0x276a <H_LED_Void_LedTog+0x56>
    2736:	2a 81       	ldd	r18, Y+2	; 0x02
    2738:	3b 81       	ldd	r19, Y+3	; 0x03
    273a:	23 30       	cpi	r18, 0x03	; 3
    273c:	31 05       	cpc	r19, r1
    273e:	34 f4       	brge	.+12     	; 0x274c <H_LED_Void_LedTog+0x38>
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	91 05       	cpc	r25, r1
    2748:	61 f0       	breq	.+24     	; 0x2762 <H_LED_Void_LedTog+0x4e>
    274a:	1a c0       	rjmp	.+52     	; 0x2780 <H_LED_Void_LedTog+0x6c>
    274c:	2a 81       	ldd	r18, Y+2	; 0x02
    274e:	3b 81       	ldd	r19, Y+3	; 0x03
    2750:	23 30       	cpi	r18, 0x03	; 3
    2752:	31 05       	cpc	r19, r1
    2754:	71 f0       	breq	.+28     	; 0x2772 <H_LED_Void_LedTog+0x5e>
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	84 30       	cpi	r24, 0x04	; 4
    275c:	91 05       	cpc	r25, r1
    275e:	69 f0       	breq	.+26     	; 0x277a <H_LED_Void_LedTog+0x66>
    2760:	0f c0       	rjmp	.+30     	; 0x2780 <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    2762:	80 e1       	ldi	r24, 0x10	; 16
    2764:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <M_DIO_Void_TogPin>
    2768:	0b c0       	rjmp	.+22     	; 0x2780 <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    276a:	8f e0       	ldi	r24, 0x0F	; 15
    276c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <M_DIO_Void_TogPin>
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2772:	8e e0       	ldi	r24, 0x0E	; 14
    2774:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <M_DIO_Void_TogPin>
    2778:	03 c0       	rjmp	.+6      	; 0x2780 <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    277a:	84 e1       	ldi	r24, 0x14	; 20
    277c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <__udivmodqi4>:
    278c:	99 1b       	sub	r25, r25
    278e:	79 e0       	ldi	r23, 0x09	; 9
    2790:	04 c0       	rjmp	.+8      	; 0x279a <__udivmodqi4_ep>

00002792 <__udivmodqi4_loop>:
    2792:	99 1f       	adc	r25, r25
    2794:	96 17       	cp	r25, r22
    2796:	08 f0       	brcs	.+2      	; 0x279a <__udivmodqi4_ep>
    2798:	96 1b       	sub	r25, r22

0000279a <__udivmodqi4_ep>:
    279a:	88 1f       	adc	r24, r24
    279c:	7a 95       	dec	r23
    279e:	c9 f7       	brne	.-14     	; 0x2792 <__udivmodqi4_loop>
    27a0:	80 95       	com	r24
    27a2:	08 95       	ret

000027a4 <__divmodsi4>:
    27a4:	97 fb       	bst	r25, 7
    27a6:	09 2e       	mov	r0, r25
    27a8:	05 26       	eor	r0, r21
    27aa:	0e d0       	rcall	.+28     	; 0x27c8 <__divmodsi4_neg1>
    27ac:	57 fd       	sbrc	r21, 7
    27ae:	04 d0       	rcall	.+8      	; 0x27b8 <__divmodsi4_neg2>
    27b0:	14 d0       	rcall	.+40     	; 0x27da <__udivmodsi4>
    27b2:	0a d0       	rcall	.+20     	; 0x27c8 <__divmodsi4_neg1>
    27b4:	00 1c       	adc	r0, r0
    27b6:	38 f4       	brcc	.+14     	; 0x27c6 <__divmodsi4_exit>

000027b8 <__divmodsi4_neg2>:
    27b8:	50 95       	com	r21
    27ba:	40 95       	com	r20
    27bc:	30 95       	com	r19
    27be:	21 95       	neg	r18
    27c0:	3f 4f       	sbci	r19, 0xFF	; 255
    27c2:	4f 4f       	sbci	r20, 0xFF	; 255
    27c4:	5f 4f       	sbci	r21, 0xFF	; 255

000027c6 <__divmodsi4_exit>:
    27c6:	08 95       	ret

000027c8 <__divmodsi4_neg1>:
    27c8:	f6 f7       	brtc	.-4      	; 0x27c6 <__divmodsi4_exit>
    27ca:	90 95       	com	r25
    27cc:	80 95       	com	r24
    27ce:	70 95       	com	r23
    27d0:	61 95       	neg	r22
    27d2:	7f 4f       	sbci	r23, 0xFF	; 255
    27d4:	8f 4f       	sbci	r24, 0xFF	; 255
    27d6:	9f 4f       	sbci	r25, 0xFF	; 255
    27d8:	08 95       	ret

000027da <__udivmodsi4>:
    27da:	a1 e2       	ldi	r26, 0x21	; 33
    27dc:	1a 2e       	mov	r1, r26
    27de:	aa 1b       	sub	r26, r26
    27e0:	bb 1b       	sub	r27, r27
    27e2:	fd 01       	movw	r30, r26
    27e4:	0d c0       	rjmp	.+26     	; 0x2800 <__udivmodsi4_ep>

000027e6 <__udivmodsi4_loop>:
    27e6:	aa 1f       	adc	r26, r26
    27e8:	bb 1f       	adc	r27, r27
    27ea:	ee 1f       	adc	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	a2 17       	cp	r26, r18
    27f0:	b3 07       	cpc	r27, r19
    27f2:	e4 07       	cpc	r30, r20
    27f4:	f5 07       	cpc	r31, r21
    27f6:	20 f0       	brcs	.+8      	; 0x2800 <__udivmodsi4_ep>
    27f8:	a2 1b       	sub	r26, r18
    27fa:	b3 0b       	sbc	r27, r19
    27fc:	e4 0b       	sbc	r30, r20
    27fe:	f5 0b       	sbc	r31, r21

00002800 <__udivmodsi4_ep>:
    2800:	66 1f       	adc	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	1a 94       	dec	r1
    280a:	69 f7       	brne	.-38     	; 0x27e6 <__udivmodsi4_loop>
    280c:	60 95       	com	r22
    280e:	70 95       	com	r23
    2810:	80 95       	com	r24
    2812:	90 95       	com	r25
    2814:	9b 01       	movw	r18, r22
    2816:	ac 01       	movw	r20, r24
    2818:	bd 01       	movw	r22, r26
    281a:	cf 01       	movw	r24, r30
    281c:	08 95       	ret

0000281e <__prologue_saves__>:
    281e:	2f 92       	push	r2
    2820:	3f 92       	push	r3
    2822:	4f 92       	push	r4
    2824:	5f 92       	push	r5
    2826:	6f 92       	push	r6
    2828:	7f 92       	push	r7
    282a:	8f 92       	push	r8
    282c:	9f 92       	push	r9
    282e:	af 92       	push	r10
    2830:	bf 92       	push	r11
    2832:	cf 92       	push	r12
    2834:	df 92       	push	r13
    2836:	ef 92       	push	r14
    2838:	ff 92       	push	r15
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	ca 1b       	sub	r28, r26
    2848:	db 0b       	sbc	r29, r27
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	09 94       	ijmp

00002856 <__epilogue_restores__>:
    2856:	2a 88       	ldd	r2, Y+18	; 0x12
    2858:	39 88       	ldd	r3, Y+17	; 0x11
    285a:	48 88       	ldd	r4, Y+16	; 0x10
    285c:	5f 84       	ldd	r5, Y+15	; 0x0f
    285e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2860:	7d 84       	ldd	r7, Y+13	; 0x0d
    2862:	8c 84       	ldd	r8, Y+12	; 0x0c
    2864:	9b 84       	ldd	r9, Y+11	; 0x0b
    2866:	aa 84       	ldd	r10, Y+10	; 0x0a
    2868:	b9 84       	ldd	r11, Y+9	; 0x09
    286a:	c8 84       	ldd	r12, Y+8	; 0x08
    286c:	df 80       	ldd	r13, Y+7	; 0x07
    286e:	ee 80       	ldd	r14, Y+6	; 0x06
    2870:	fd 80       	ldd	r15, Y+5	; 0x05
    2872:	0c 81       	ldd	r16, Y+4	; 0x04
    2874:	1b 81       	ldd	r17, Y+3	; 0x03
    2876:	aa 81       	ldd	r26, Y+2	; 0x02
    2878:	b9 81       	ldd	r27, Y+1	; 0x01
    287a:	ce 0f       	add	r28, r30
    287c:	d1 1d       	adc	r29, r1
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	ed 01       	movw	r28, r26
    288a:	08 95       	ret

0000288c <memcpy>:
    288c:	fb 01       	movw	r30, r22
    288e:	dc 01       	movw	r26, r24
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <memcpy+0xa>
    2892:	01 90       	ld	r0, Z+
    2894:	0d 92       	st	X+, r0
    2896:	41 50       	subi	r20, 0x01	; 1
    2898:	50 40       	sbci	r21, 0x00	; 0
    289a:	d8 f7       	brcc	.-10     	; 0x2892 <memcpy+0x6>
    289c:	08 95       	ret

0000289e <_exit>:
    289e:	f8 94       	cli

000028a0 <__stop_program>:
    28a0:	ff cf       	rjmp	.-2      	; 0x28a0 <__stop_program>
